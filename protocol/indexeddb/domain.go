// Code generated by cdpgen. DO NOT EDIT.

// Package indexeddb implements the IndexedDB domain.
package indexeddb

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the IndexedDB domain.
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the IndexedDB domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the IndexedDB domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// ClearObjectStore invokes the IndexedDB method. Clears all entries from an
// object store.
func (d *domainClient) ClearObjectStore(ctx context.Context, args *ClearObjectStoreArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.clearObjectStore", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.clearObjectStore", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IndexedDB", Op: "ClearObjectStore", Err: err}
	}
	return
}

// DeleteDatabase invokes the IndexedDB method. Deletes a database.
func (d *domainClient) DeleteDatabase(ctx context.Context, args *DeleteDatabaseArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.deleteDatabase", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.deleteDatabase", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IndexedDB", Op: "DeleteDatabase", Err: err}
	}
	return
}

// DeleteObjectStoreEntries invokes the IndexedDB method. Delete a range of
// entries from an object store
func (d *domainClient) DeleteObjectStoreEntries(ctx context.Context, args *DeleteObjectStoreEntriesArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.deleteObjectStoreEntries", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.deleteObjectStoreEntries", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IndexedDB", Op: "DeleteObjectStoreEntries", Err: err}
	}
	return
}

// Disable invokes the IndexedDB method. Disables events from backend.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "IndexedDB.disable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "IndexedDB", Op: "Disable", Err: err}
	}
	return
}

// Enable invokes the IndexedDB method. Enables events from backend.
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "IndexedDB.enable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "IndexedDB", Op: "Enable", Err: err}
	}
	return
}

// RequestData invokes the IndexedDB method. Requests data from object store
// or index.
func (d *domainClient) RequestData(ctx context.Context, args *RequestDataArgs) (reply *RequestDataReply, err error) {
	reply = new(RequestDataReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.requestData", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.requestData", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IndexedDB", Op: "RequestData", Err: err}
	}
	return
}

// GetMetadata invokes the IndexedDB method. Gets metadata of an object store
func (d *domainClient) GetMetadata(ctx context.Context, args *GetMetadataArgs) (reply *GetMetadataReply, err error) {
	reply = new(GetMetadataReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.getMetadata", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.getMetadata", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IndexedDB", Op: "GetMetadata", Err: err}
	}
	return
}

// RequestDatabase invokes the IndexedDB method. Requests database with given
// name in given frame.
func (d *domainClient) RequestDatabase(ctx context.Context, args *RequestDatabaseArgs) (reply *RequestDatabaseReply, err error) {
	reply = new(RequestDatabaseReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.requestDatabase", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.requestDatabase", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IndexedDB", Op: "RequestDatabase", Err: err}
	}
	return
}

// RequestDatabaseNames invokes the IndexedDB method. Requests database names
// for given security origin.
func (d *domainClient) RequestDatabaseNames(ctx context.Context, args *RequestDatabaseNamesArgs) (reply *RequestDatabaseNamesReply, err error) {
	reply = new(RequestDatabaseNamesReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.requestDatabaseNames", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IndexedDB.requestDatabaseNames", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IndexedDB", Op: "RequestDatabaseNames", Err: err}
	}
	return
}
