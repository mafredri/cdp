// Code generated by cdpgen. DO NOT EDIT.

package dom

import (
	"encoding/json"
)

// NodeID Unique DOM node identifier.
type NodeID int

// BackendNodeID Unique DOM node identifier used to reference a node that may not have been pushed to the front-end.
//
// Note: This type is experimental.
type BackendNodeID int

// BackendNode Backend node with a friendly name.
//
// Note: This type is experimental.
type BackendNode struct {
	NodeType      int           `json:"nodeType"`      // Node's nodeType.
	NodeName      string        `json:"nodeName"`      // Node's nodeName.
	BackendNodeID BackendNodeID `json:"backendNodeId"` // No description.
}

// PseudoType Pseudo element type.
type PseudoType string

// PseudoType as enums.
const (
	PseudoTypeNotSet              PseudoType = ""
	PseudoTypeFirstLine           PseudoType = "first-line"
	PseudoTypeFirstLetter         PseudoType = "first-letter"
	PseudoTypeBefore              PseudoType = "before"
	PseudoTypeAfter               PseudoType = "after"
	PseudoTypeBackdrop            PseudoType = "backdrop"
	PseudoTypeSelection           PseudoType = "selection"
	PseudoTypeFirstLineInherited  PseudoType = "first-line-inherited"
	PseudoTypeScrollbar           PseudoType = "scrollbar"
	PseudoTypeScrollbarThumb      PseudoType = "scrollbar-thumb"
	PseudoTypeScrollbarButton     PseudoType = "scrollbar-button"
	PseudoTypeScrollbarTrack      PseudoType = "scrollbar-track"
	PseudoTypeScrollbarTrackPiece PseudoType = "scrollbar-track-piece"
	PseudoTypeScrollbarCorner     PseudoType = "scrollbar-corner"
	PseudoTypeResizer             PseudoType = "resizer"
	PseudoTypeInputListButton     PseudoType = "input-list-button"
)

func (e PseudoType) Valid() bool {
	switch e {
	case "first-line", "first-letter", "before", "after", "backdrop", "selection", "first-line-inherited", "scrollbar", "scrollbar-thumb", "scrollbar-button", "scrollbar-track", "scrollbar-track-piece", "scrollbar-corner", "resizer", "input-list-button":
		return true
	default:
		return false
	}
}

func (e PseudoType) String() string {
	return string(e)
}

// ShadowRootType Shadow root type.
type ShadowRootType string

// ShadowRootType as enums.
const (
	ShadowRootTypeNotSet    ShadowRootType = ""
	ShadowRootTypeUserAgent ShadowRootType = "user-agent"
	ShadowRootTypeOpen      ShadowRootType = "open"
	ShadowRootTypeClosed    ShadowRootType = "closed"
)

func (e ShadowRootType) Valid() bool {
	switch e {
	case "user-agent", "open", "closed":
		return true
	default:
		return false
	}
}

func (e ShadowRootType) String() string {
	return string(e)
}

// RGBA A structure holding an RGBA color.
type RGBA struct {
	R int      `json:"r"`           // The red component, in the [0-255] range.
	G int      `json:"g"`           // The green component, in the [0-255] range.
	B int      `json:"b"`           // The blue component, in the [0-255] range.
	A *float64 `json:"a,omitempty"` // The alpha component, in the [0-1] range (default: 1).
}

// Quad An array of quad vertices, x immediately followed by y for each point, points clock-wise.
//
// Note: This type is experimental.
type Quad []float64

// BoxModel Box model.
//
// Note: This type is experimental.
type BoxModel struct {
	Content      Quad              `json:"content"`                // Content box
	Padding      Quad              `json:"padding"`                // Padding box
	Border       Quad              `json:"border"`                 // Border box
	Margin       Quad              `json:"margin"`                 // Margin box
	Width        int               `json:"width"`                  // Node width
	Height       int               `json:"height"`                 // Node height
	ShapeOutside *ShapeOutsideInfo `json:"shapeOutside,omitempty"` // Shape outside coordinates
}

// ShapeOutsideInfo CSS Shape Outside details.
//
// Note: This type is experimental.
type ShapeOutsideInfo struct {
	Bounds      Quad              `json:"bounds"`      // Shape bounds
	Shape       []json.RawMessage `json:"shape"`       // Shape coordinate details
	MarginShape []json.RawMessage `json:"marginShape"` // Margin shape bounds
}

// Rect Rectangle.
//
// Note: This type is experimental.
type Rect struct {
	X      float64 `json:"x"`      // X coordinate
	Y      float64 `json:"y"`      // Y coordinate
	Width  float64 `json:"width"`  // Rectangle width
	Height float64 `json:"height"` // Rectangle height
}
