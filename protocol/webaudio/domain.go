// Code generated by cdpgen. DO NOT EDIT.

// Package webaudio implements the WebAudio domain. This domain allows
// inspection of Web Audio API. https://webaudio.github.io/web-audio-api/
package webaudio

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the WebAudio domain. This domain allows
// inspection of Web Audio API. https://webaudio.github.io/web-audio-api/
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the WebAudio domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the WebAudio domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// Enable invokes the WebAudio method. Enables the WebAudio domain and starts
// sending context lifetime events.
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "WebAudio.enable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "WebAudio", Op: "Enable", Err: err}
	}
	return
}

// Disable invokes the WebAudio method. Disables the WebAudio domain.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "WebAudio.disable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "WebAudio", Op: "Disable", Err: err}
	}
	return
}

// GetRealtimeData invokes the WebAudio method. Fetch the realtime data from
// the registered contexts.
func (d *domainClient) GetRealtimeData(ctx context.Context, args *GetRealtimeDataArgs) (reply *GetRealtimeDataReply, err error) {
	reply = new(GetRealtimeDataReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "WebAudio.getRealtimeData", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "WebAudio.getRealtimeData", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "WebAudio", Op: "GetRealtimeData", Err: err}
	}
	return
}

func (d *domainClient) ContextCreated(ctx context.Context) (ContextCreatedClient, error) {
	s, err := rpcc.NewStream(ctx, "WebAudio.contextCreated", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &contextCreatedClient{Stream: s}, nil
}

type contextCreatedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *contextCreatedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *contextCreatedClient) Recv() (*ContextCreatedReply, error) {
	event := new(ContextCreatedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "WebAudio", Op: "ContextCreated Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) ContextDestroyed(ctx context.Context) (ContextDestroyedClient, error) {
	s, err := rpcc.NewStream(ctx, "WebAudio.contextDestroyed", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &contextDestroyedClient{Stream: s}, nil
}

type contextDestroyedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *contextDestroyedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *contextDestroyedClient) Recv() (*ContextDestroyedReply, error) {
	event := new(ContextDestroyedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "WebAudio", Op: "ContextDestroyed Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) ContextChanged(ctx context.Context) (ContextChangedClient, error) {
	s, err := rpcc.NewStream(ctx, "WebAudio.contextChanged", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &contextChangedClient{Stream: s}, nil
}

type contextChangedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *contextChangedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *contextChangedClient) Recv() (*ContextChangedReply, error) {
	event := new(ContextChangedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "WebAudio", Op: "ContextChanged Recv", Err: err}
	}
	return event, nil
}
