// Code generated by cdpgen. DO NOT EDIT.

package audits

import (
	"github.com/mafredri/cdp/protocol/network"
	"github.com/mafredri/cdp/protocol/page"
)

// AffectedCookie Information about a cookie that is affected by an inspector
// issue.
type AffectedCookie struct {
	Name   string `json:"name"`   // The following three properties uniquely identify a cookie
	Path   string `json:"path"`   // No description.
	Domain string `json:"domain"` // No description.
}

// AffectedRequest Information about a request that is affected by an
// inspector issue.
type AffectedRequest struct {
	RequestID network.RequestID `json:"requestId"`     // The unique request id.
	URL       *string           `json:"url,omitempty"` // No description.
}

// AffectedFrame Information about the frame affected by an inspector issue.
type AffectedFrame struct {
	FrameID page.FrameID `json:"frameId"` // No description.
}

// SameSiteCookieExclusionReason
type SameSiteCookieExclusionReason string

// SameSiteCookieExclusionReason as enums.
const (
	SameSiteCookieExclusionReasonNotSet                                 SameSiteCookieExclusionReason = ""
	SameSiteCookieExclusionReasonExcludeSameSiteUnspecifiedTreatedAsLax SameSiteCookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"
	SameSiteCookieExclusionReasonExcludeSameSiteNoneInsecure            SameSiteCookieExclusionReason = "ExcludeSameSiteNoneInsecure"
)

func (e SameSiteCookieExclusionReason) Valid() bool {
	switch e {
	case "ExcludeSameSiteUnspecifiedTreatedAsLax", "ExcludeSameSiteNoneInsecure":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieExclusionReason) String() string {
	return string(e)
}

// SameSiteCookieWarningReason
type SameSiteCookieWarningReason string

// SameSiteCookieWarningReason as enums.
const (
	SameSiteCookieWarningReasonNotSet                                  SameSiteCookieWarningReason = ""
	SameSiteCookieWarningReasonWarnSameSiteUnspecifiedCrossSiteContext SameSiteCookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"
	SameSiteCookieWarningReasonWarnSameSiteNoneInsecure                SameSiteCookieWarningReason = "WarnSameSiteNoneInsecure"
	SameSiteCookieWarningReasonWarnSameSiteUnspecifiedLaxAllowUnsafe   SameSiteCookieWarningReason = "WarnSameSiteUnspecifiedLaxAllowUnsafe"
	SameSiteCookieWarningReasonWarnSameSiteStrictLaxDowngradeStrict    SameSiteCookieWarningReason = "WarnSameSiteStrictLaxDowngradeStrict"
	SameSiteCookieWarningReasonWarnSameSiteStrictCrossDowngradeStrict  SameSiteCookieWarningReason = "WarnSameSiteStrictCrossDowngradeStrict"
	SameSiteCookieWarningReasonWarnSameSiteStrictCrossDowngradeLax     SameSiteCookieWarningReason = "WarnSameSiteStrictCrossDowngradeLax"
	SameSiteCookieWarningReasonWarnSameSiteLaxCrossDowngradeStrict     SameSiteCookieWarningReason = "WarnSameSiteLaxCrossDowngradeStrict"
	SameSiteCookieWarningReasonWarnSameSiteLaxCrossDowngradeLax        SameSiteCookieWarningReason = "WarnSameSiteLaxCrossDowngradeLax"
)

func (e SameSiteCookieWarningReason) Valid() bool {
	switch e {
	case "WarnSameSiteUnspecifiedCrossSiteContext", "WarnSameSiteNoneInsecure", "WarnSameSiteUnspecifiedLaxAllowUnsafe", "WarnSameSiteStrictLaxDowngradeStrict", "WarnSameSiteStrictCrossDowngradeStrict", "WarnSameSiteStrictCrossDowngradeLax", "WarnSameSiteLaxCrossDowngradeStrict", "WarnSameSiteLaxCrossDowngradeLax":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieWarningReason) String() string {
	return string(e)
}

// SameSiteCookieOperation
type SameSiteCookieOperation string

// SameSiteCookieOperation as enums.
const (
	SameSiteCookieOperationNotSet     SameSiteCookieOperation = ""
	SameSiteCookieOperationSetCookie  SameSiteCookieOperation = "SetCookie"
	SameSiteCookieOperationReadCookie SameSiteCookieOperation = "ReadCookie"
)

func (e SameSiteCookieOperation) Valid() bool {
	switch e {
	case "SetCookie", "ReadCookie":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieOperation) String() string {
	return string(e)
}

// SameSiteCookieIssueDetails This information is currently necessary, as the
// front-end has a difficult time finding a specific cookie. With this, we can
// convey specific error information without the cookie.
type SameSiteCookieIssueDetails struct {
	Cookie                 AffectedCookie                  `json:"cookie"`                   // No description.
	CookieWarningReasons   []SameSiteCookieWarningReason   `json:"cookieWarningReasons"`     // No description.
	CookieExclusionReasons []SameSiteCookieExclusionReason `json:"cookieExclusionReasons"`   // No description.
	Operation              SameSiteCookieOperation         `json:"operation"`                // Optionally identifies the site-for-cookies and the cookie url, which may be used by the front-end as additional context.
	SiteForCookies         *string                         `json:"siteForCookies,omitempty"` // No description.
	CookieURL              *string                         `json:"cookieUrl,omitempty"`      // No description.
	Request                *AffectedRequest                `json:"request,omitempty"`        // No description.
}

// MixedContentResolutionStatus
type MixedContentResolutionStatus string

// MixedContentResolutionStatus as enums.
const (
	MixedContentResolutionStatusNotSet                            MixedContentResolutionStatus = ""
	MixedContentResolutionStatusMixedContentBlocked               MixedContentResolutionStatus = "MixedContentBlocked"
	MixedContentResolutionStatusMixedContentAutomaticallyUpgraded MixedContentResolutionStatus = "MixedContentAutomaticallyUpgraded"
	MixedContentResolutionStatusMixedContentWarning               MixedContentResolutionStatus = "MixedContentWarning"
)

func (e MixedContentResolutionStatus) Valid() bool {
	switch e {
	case "MixedContentBlocked", "MixedContentAutomaticallyUpgraded", "MixedContentWarning":
		return true
	default:
		return false
	}
}

func (e MixedContentResolutionStatus) String() string {
	return string(e)
}

// MixedContentResourceType
type MixedContentResourceType string

// MixedContentResourceType as enums.
const (
	MixedContentResourceTypeNotSet         MixedContentResourceType = ""
	MixedContentResourceTypeAudio          MixedContentResourceType = "Audio"
	MixedContentResourceTypeBeacon         MixedContentResourceType = "Beacon"
	MixedContentResourceTypeCSPReport      MixedContentResourceType = "CSPReport"
	MixedContentResourceTypeDownload       MixedContentResourceType = "Download"
	MixedContentResourceTypeEventSource    MixedContentResourceType = "EventSource"
	MixedContentResourceTypeFavicon        MixedContentResourceType = "Favicon"
	MixedContentResourceTypeFont           MixedContentResourceType = "Font"
	MixedContentResourceTypeForm           MixedContentResourceType = "Form"
	MixedContentResourceTypeFrame          MixedContentResourceType = "Frame"
	MixedContentResourceTypeImage          MixedContentResourceType = "Image"
	MixedContentResourceTypeImport         MixedContentResourceType = "Import"
	MixedContentResourceTypeManifest       MixedContentResourceType = "Manifest"
	MixedContentResourceTypePing           MixedContentResourceType = "Ping"
	MixedContentResourceTypePluginData     MixedContentResourceType = "PluginData"
	MixedContentResourceTypePluginResource MixedContentResourceType = "PluginResource"
	MixedContentResourceTypePrefetch       MixedContentResourceType = "Prefetch"
	MixedContentResourceTypeResource       MixedContentResourceType = "Resource"
	MixedContentResourceTypeScript         MixedContentResourceType = "Script"
	MixedContentResourceTypeServiceWorker  MixedContentResourceType = "ServiceWorker"
	MixedContentResourceTypeSharedWorker   MixedContentResourceType = "SharedWorker"
	MixedContentResourceTypeStylesheet     MixedContentResourceType = "Stylesheet"
	MixedContentResourceTypeTrack          MixedContentResourceType = "Track"
	MixedContentResourceTypeVideo          MixedContentResourceType = "Video"
	MixedContentResourceTypeWorker         MixedContentResourceType = "Worker"
	MixedContentResourceTypeXMLHttpRequest MixedContentResourceType = "XMLHttpRequest"
	MixedContentResourceTypeXSLT           MixedContentResourceType = "XSLT"
)

func (e MixedContentResourceType) Valid() bool {
	switch e {
	case "Audio", "Beacon", "CSPReport", "Download", "EventSource", "Favicon", "Font", "Form", "Frame", "Image", "Import", "Manifest", "Ping", "PluginData", "PluginResource", "Prefetch", "Resource", "Script", "ServiceWorker", "SharedWorker", "Stylesheet", "Track", "Video", "Worker", "XMLHttpRequest", "XSLT":
		return true
	default:
		return false
	}
}

func (e MixedContentResourceType) String() string {
	return string(e)
}

// MixedContentIssueDetails
type MixedContentIssueDetails struct {
	ResourceType     MixedContentResourceType     `json:"resourceType,omitempty"` // The type of resource causing the mixed content issue (css, js, iframe, form,...). Marked as optional because it is mapped to from blink::mojom::RequestContextType, which will be replaced by network::mojom::RequestDestination
	ResolutionStatus MixedContentResolutionStatus `json:"resolutionStatus"`       // The way the mixed content issue is being resolved.
	InsecureURL      string                       `json:"insecureURL"`            // The unsafe http url causing the mixed content issue.
	MainResourceURL  string                       `json:"mainResourceURL"`        // The url responsible for the call to an unsafe url.
	Request          *AffectedRequest             `json:"request,omitempty"`      // The mixed content request. Does not always exist (e.g. for unsafe form submission urls).
	Frame            *AffectedFrame               `json:"frame,omitempty"`        // Optional because not every mixed content issue is necessarily linked to a frame.
}

// BlockedByResponseReason Enum indicating the reason a response has been
// blocked. These reasons are refinements of the net error BLOCKED_BY_RESPONSE.
type BlockedByResponseReason string

// BlockedByResponseReason as enums.
const (
	BlockedByResponseReasonNotSet                                            BlockedByResponseReason = ""
	BlockedByResponseReasonCoepFrameResourceNeedsCoepHeader                  BlockedByResponseReason = "CoepFrameResourceNeedsCoepHeader"
	BlockedByResponseReasonCoopSandboxedIFrameCannotNavigateToCoopPage       BlockedByResponseReason = "CoopSandboxedIFrameCannotNavigateToCoopPage"
	BlockedByResponseReasonCorpNotSameOrigin                                 BlockedByResponseReason = "CorpNotSameOrigin"
	BlockedByResponseReasonCorpNotSameOriginAfterDefaultedToSameOriginByCoep BlockedByResponseReason = "CorpNotSameOriginAfterDefaultedToSameOriginByCoep"
	BlockedByResponseReasonCorpNotSameSite                                   BlockedByResponseReason = "CorpNotSameSite"
)

func (e BlockedByResponseReason) Valid() bool {
	switch e {
	case "CoepFrameResourceNeedsCoepHeader", "CoopSandboxedIFrameCannotNavigateToCoopPage", "CorpNotSameOrigin", "CorpNotSameOriginAfterDefaultedToSameOriginByCoep", "CorpNotSameSite":
		return true
	default:
		return false
	}
}

func (e BlockedByResponseReason) String() string {
	return string(e)
}

// BlockedByResponseIssueDetails Details for a request that has been blocked
// with the BLOCKED_BY_RESPONSE code. Currently only used for COEP/COOP, but
// may be extended to include some CSP errors in the future.
type BlockedByResponseIssueDetails struct {
	Request AffectedRequest         `json:"request"`         // No description.
	Frame   *AffectedFrame          `json:"frame,omitempty"` // No description.
	Reason  BlockedByResponseReason `json:"reason"`          // No description.
}

// InspectorIssueCode A unique identifier for the type of issue. Each type may
// use one of the optional fields in InspectorIssueDetails to convey more
// specific information about the kind of issue.
type InspectorIssueCode string

// InspectorIssueCode as enums.
const (
	InspectorIssueCodeNotSet                 InspectorIssueCode = ""
	InspectorIssueCodeSameSiteCookieIssue    InspectorIssueCode = "SameSiteCookieIssue"
	InspectorIssueCodeMixedContentIssue      InspectorIssueCode = "MixedContentIssue"
	InspectorIssueCodeBlockedByResponseIssue InspectorIssueCode = "BlockedByResponseIssue"
)

func (e InspectorIssueCode) Valid() bool {
	switch e {
	case "SameSiteCookieIssue", "MixedContentIssue", "BlockedByResponseIssue":
		return true
	default:
		return false
	}
}

func (e InspectorIssueCode) String() string {
	return string(e)
}

// InspectorIssueDetails This struct holds a list of optional fields with
// additional information specific to the kind of issue. When adding a new
// issue code, please also add a new optional field to this type.
type InspectorIssueDetails struct {
	SameSiteCookieIssueDetails    *SameSiteCookieIssueDetails    `json:"sameSiteCookieIssueDetails,omitempty"`    // No description.
	MixedContentIssueDetails      *MixedContentIssueDetails      `json:"mixedContentIssueDetails,omitempty"`      // No description.
	BlockedByResponseIssueDetails *BlockedByResponseIssueDetails `json:"blockedByResponseIssueDetails,omitempty"` // No description.
}

// InspectorIssue An inspector issue reported from the back-end.
type InspectorIssue struct {
	Code    InspectorIssueCode    `json:"code"`    // No description.
	Details InspectorIssueDetails `json:"details"` // No description.
}
