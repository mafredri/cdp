// Code generated by cdpgen. DO NOT EDIT.

package audits

import (
	"github.com/mafredri/cdp/protocol/dom"
	"github.com/mafredri/cdp/protocol/network"
	"github.com/mafredri/cdp/protocol/page"
	"github.com/mafredri/cdp/protocol/runtime"
)

// AffectedCookie Information about a cookie that is affected by an inspector
// issue.
type AffectedCookie struct {
	Name   string `json:"name"`   // The following three properties uniquely identify a cookie
	Path   string `json:"path"`   // No description.
	Domain string `json:"domain"` // No description.
}

// AffectedRequest Information about a request that is affected by an
// inspector issue.
type AffectedRequest struct {
	RequestID network.RequestID `json:"requestId"`     // The unique request id.
	URL       *string           `json:"url,omitempty"` // No description.
}

// AffectedFrame Information about the frame affected by an inspector issue.
type AffectedFrame struct {
	FrameID page.FrameID `json:"frameId"` // No description.
}

// CookieExclusionReason
type CookieExclusionReason string

// CookieExclusionReason as enums.
const (
	CookieExclusionReasonNotSet                                 CookieExclusionReason = ""
	CookieExclusionReasonExcludeSameSiteUnspecifiedTreatedAsLax CookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"
	CookieExclusionReasonExcludeSameSiteNoneInsecure            CookieExclusionReason = "ExcludeSameSiteNoneInsecure"
	CookieExclusionReasonExcludeSameSiteLax                     CookieExclusionReason = "ExcludeSameSiteLax"
	CookieExclusionReasonExcludeSameSiteStrict                  CookieExclusionReason = "ExcludeSameSiteStrict"
	CookieExclusionReasonExcludeInvalidSameParty                CookieExclusionReason = "ExcludeInvalidSameParty"
	CookieExclusionReasonExcludeSamePartyCrossPartyContext      CookieExclusionReason = "ExcludeSamePartyCrossPartyContext"
)

func (e CookieExclusionReason) Valid() bool {
	switch e {
	case "ExcludeSameSiteUnspecifiedTreatedAsLax", "ExcludeSameSiteNoneInsecure", "ExcludeSameSiteLax", "ExcludeSameSiteStrict", "ExcludeInvalidSameParty", "ExcludeSamePartyCrossPartyContext":
		return true
	default:
		return false
	}
}

func (e CookieExclusionReason) String() string {
	return string(e)
}

// CookieWarningReason
type CookieWarningReason string

// CookieWarningReason as enums.
const (
	CookieWarningReasonNotSet                                  CookieWarningReason = ""
	CookieWarningReasonWarnSameSiteUnspecifiedCrossSiteContext CookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"
	CookieWarningReasonWarnSameSiteNoneInsecure                CookieWarningReason = "WarnSameSiteNoneInsecure"
	CookieWarningReasonWarnSameSiteUnspecifiedLaxAllowUnsafe   CookieWarningReason = "WarnSameSiteUnspecifiedLaxAllowUnsafe"
	CookieWarningReasonWarnSameSiteStrictLaxDowngradeStrict    CookieWarningReason = "WarnSameSiteStrictLaxDowngradeStrict"
	CookieWarningReasonWarnSameSiteStrictCrossDowngradeStrict  CookieWarningReason = "WarnSameSiteStrictCrossDowngradeStrict"
	CookieWarningReasonWarnSameSiteStrictCrossDowngradeLax     CookieWarningReason = "WarnSameSiteStrictCrossDowngradeLax"
	CookieWarningReasonWarnSameSiteLaxCrossDowngradeStrict     CookieWarningReason = "WarnSameSiteLaxCrossDowngradeStrict"
	CookieWarningReasonWarnSameSiteLaxCrossDowngradeLax        CookieWarningReason = "WarnSameSiteLaxCrossDowngradeLax"
	CookieWarningReasonWarnAttributeValueExceedsMaxSize        CookieWarningReason = "WarnAttributeValueExceedsMaxSize"
)

func (e CookieWarningReason) Valid() bool {
	switch e {
	case "WarnSameSiteUnspecifiedCrossSiteContext", "WarnSameSiteNoneInsecure", "WarnSameSiteUnspecifiedLaxAllowUnsafe", "WarnSameSiteStrictLaxDowngradeStrict", "WarnSameSiteStrictCrossDowngradeStrict", "WarnSameSiteStrictCrossDowngradeLax", "WarnSameSiteLaxCrossDowngradeStrict", "WarnSameSiteLaxCrossDowngradeLax", "WarnAttributeValueExceedsMaxSize":
		return true
	default:
		return false
	}
}

func (e CookieWarningReason) String() string {
	return string(e)
}

// CookieOperation
type CookieOperation string

// CookieOperation as enums.
const (
	CookieOperationNotSet     CookieOperation = ""
	CookieOperationSetCookie  CookieOperation = "SetCookie"
	CookieOperationReadCookie CookieOperation = "ReadCookie"
)

func (e CookieOperation) Valid() bool {
	switch e {
	case "SetCookie", "ReadCookie":
		return true
	default:
		return false
	}
}

func (e CookieOperation) String() string {
	return string(e)
}

// CookieIssueDetails This information is currently necessary, as the
// front-end has a difficult time finding a specific cookie. With this, we can
// convey specific error information without the cookie.
type CookieIssueDetails struct {
	Cookie                 *AffectedCookie         `json:"cookie,omitempty"`         // If AffectedCookie is not set then rawCookieLine contains the raw Set-Cookie header string. This hints at a problem where the cookie line is syntactically or semantically malformed in a way that no valid cookie could be created.
	RawCookieLine          *string                 `json:"rawCookieLine,omitempty"`  // No description.
	CookieWarningReasons   []CookieWarningReason   `json:"cookieWarningReasons"`     // No description.
	CookieExclusionReasons []CookieExclusionReason `json:"cookieExclusionReasons"`   // No description.
	Operation              CookieOperation         `json:"operation"`                // Optionally identifies the site-for-cookies and the cookie url, which may be used by the front-end as additional context.
	SiteForCookies         *string                 `json:"siteForCookies,omitempty"` // No description.
	CookieURL              *string                 `json:"cookieUrl,omitempty"`      // No description.
	Request                *AffectedRequest        `json:"request,omitempty"`        // No description.
}

// MixedContentResolutionStatus
type MixedContentResolutionStatus string

// MixedContentResolutionStatus as enums.
const (
	MixedContentResolutionStatusNotSet                            MixedContentResolutionStatus = ""
	MixedContentResolutionStatusMixedContentBlocked               MixedContentResolutionStatus = "MixedContentBlocked"
	MixedContentResolutionStatusMixedContentAutomaticallyUpgraded MixedContentResolutionStatus = "MixedContentAutomaticallyUpgraded"
	MixedContentResolutionStatusMixedContentWarning               MixedContentResolutionStatus = "MixedContentWarning"
)

func (e MixedContentResolutionStatus) Valid() bool {
	switch e {
	case "MixedContentBlocked", "MixedContentAutomaticallyUpgraded", "MixedContentWarning":
		return true
	default:
		return false
	}
}

func (e MixedContentResolutionStatus) String() string {
	return string(e)
}

// MixedContentResourceType
type MixedContentResourceType string

// MixedContentResourceType as enums.
const (
	MixedContentResourceTypeNotSet         MixedContentResourceType = ""
	MixedContentResourceTypeAttributionSrc MixedContentResourceType = "AttributionSrc"
	MixedContentResourceTypeAudio          MixedContentResourceType = "Audio"
	MixedContentResourceTypeBeacon         MixedContentResourceType = "Beacon"
	MixedContentResourceTypeCSPReport      MixedContentResourceType = "CSPReport"
	MixedContentResourceTypeDownload       MixedContentResourceType = "Download"
	MixedContentResourceTypeEventSource    MixedContentResourceType = "EventSource"
	MixedContentResourceTypeFavicon        MixedContentResourceType = "Favicon"
	MixedContentResourceTypeFont           MixedContentResourceType = "Font"
	MixedContentResourceTypeForm           MixedContentResourceType = "Form"
	MixedContentResourceTypeFrame          MixedContentResourceType = "Frame"
	MixedContentResourceTypeImage          MixedContentResourceType = "Image"
	MixedContentResourceTypeImport         MixedContentResourceType = "Import"
	MixedContentResourceTypeManifest       MixedContentResourceType = "Manifest"
	MixedContentResourceTypePing           MixedContentResourceType = "Ping"
	MixedContentResourceTypePluginData     MixedContentResourceType = "PluginData"
	MixedContentResourceTypePluginResource MixedContentResourceType = "PluginResource"
	MixedContentResourceTypePrefetch       MixedContentResourceType = "Prefetch"
	MixedContentResourceTypeResource       MixedContentResourceType = "Resource"
	MixedContentResourceTypeScript         MixedContentResourceType = "Script"
	MixedContentResourceTypeServiceWorker  MixedContentResourceType = "ServiceWorker"
	MixedContentResourceTypeSharedWorker   MixedContentResourceType = "SharedWorker"
	MixedContentResourceTypeStylesheet     MixedContentResourceType = "Stylesheet"
	MixedContentResourceTypeTrack          MixedContentResourceType = "Track"
	MixedContentResourceTypeVideo          MixedContentResourceType = "Video"
	MixedContentResourceTypeWorker         MixedContentResourceType = "Worker"
	MixedContentResourceTypeXMLHttpRequest MixedContentResourceType = "XMLHttpRequest"
	MixedContentResourceTypeXSLT           MixedContentResourceType = "XSLT"
)

func (e MixedContentResourceType) Valid() bool {
	switch e {
	case "AttributionSrc", "Audio", "Beacon", "CSPReport", "Download", "EventSource", "Favicon", "Font", "Form", "Frame", "Image", "Import", "Manifest", "Ping", "PluginData", "PluginResource", "Prefetch", "Resource", "Script", "ServiceWorker", "SharedWorker", "Stylesheet", "Track", "Video", "Worker", "XMLHttpRequest", "XSLT":
		return true
	default:
		return false
	}
}

func (e MixedContentResourceType) String() string {
	return string(e)
}

// MixedContentIssueDetails
type MixedContentIssueDetails struct {
	ResourceType     MixedContentResourceType     `json:"resourceType,omitempty"` // The type of resource causing the mixed content issue (css, js, iframe, form,...). Marked as optional because it is mapped to from blink::mojom::RequestContextType, which will be replaced by network::mojom::RequestDestination
	ResolutionStatus MixedContentResolutionStatus `json:"resolutionStatus"`       // The way the mixed content issue is being resolved.
	InsecureURL      string                       `json:"insecureURL"`            // The unsafe http url causing the mixed content issue.
	MainResourceURL  string                       `json:"mainResourceURL"`        // The url responsible for the call to an unsafe url.
	Request          *AffectedRequest             `json:"request,omitempty"`      // The mixed content request. Does not always exist (e.g. for unsafe form submission urls).
	Frame            *AffectedFrame               `json:"frame,omitempty"`        // Optional because not every mixed content issue is necessarily linked to a frame.
}

// BlockedByResponseReason Enum indicating the reason a response has been
// blocked. These reasons are refinements of the net error BLOCKED_BY_RESPONSE.
type BlockedByResponseReason string

// BlockedByResponseReason as enums.
const (
	BlockedByResponseReasonNotSet                                            BlockedByResponseReason = ""
	BlockedByResponseReasonCoepFrameResourceNeedsCoepHeader                  BlockedByResponseReason = "CoepFrameResourceNeedsCoepHeader"
	BlockedByResponseReasonCoopSandboxedIFrameCannotNavigateToCoopPage       BlockedByResponseReason = "CoopSandboxedIFrameCannotNavigateToCoopPage"
	BlockedByResponseReasonCorpNotSameOrigin                                 BlockedByResponseReason = "CorpNotSameOrigin"
	BlockedByResponseReasonCorpNotSameOriginAfterDefaultedToSameOriginByCoep BlockedByResponseReason = "CorpNotSameOriginAfterDefaultedToSameOriginByCoep"
	BlockedByResponseReasonCorpNotSameSite                                   BlockedByResponseReason = "CorpNotSameSite"
)

func (e BlockedByResponseReason) Valid() bool {
	switch e {
	case "CoepFrameResourceNeedsCoepHeader", "CoopSandboxedIFrameCannotNavigateToCoopPage", "CorpNotSameOrigin", "CorpNotSameOriginAfterDefaultedToSameOriginByCoep", "CorpNotSameSite":
		return true
	default:
		return false
	}
}

func (e BlockedByResponseReason) String() string {
	return string(e)
}

// BlockedByResponseIssueDetails Details for a request that has been blocked
// with the BLOCKED_BY_RESPONSE code. Currently only used for COEP/COOP, but
// may be extended to include some CSP errors in the future.
type BlockedByResponseIssueDetails struct {
	Request      AffectedRequest         `json:"request"`                // No description.
	ParentFrame  *AffectedFrame          `json:"parentFrame,omitempty"`  // No description.
	BlockedFrame *AffectedFrame          `json:"blockedFrame,omitempty"` // No description.
	Reason       BlockedByResponseReason `json:"reason"`                 // No description.
}

// HeavyAdResolutionStatus
type HeavyAdResolutionStatus string

// HeavyAdResolutionStatus as enums.
const (
	HeavyAdResolutionStatusNotSet         HeavyAdResolutionStatus = ""
	HeavyAdResolutionStatusHeavyAdBlocked HeavyAdResolutionStatus = "HeavyAdBlocked"
	HeavyAdResolutionStatusHeavyAdWarning HeavyAdResolutionStatus = "HeavyAdWarning"
)

func (e HeavyAdResolutionStatus) Valid() bool {
	switch e {
	case "HeavyAdBlocked", "HeavyAdWarning":
		return true
	default:
		return false
	}
}

func (e HeavyAdResolutionStatus) String() string {
	return string(e)
}

// HeavyAdReason
type HeavyAdReason string

// HeavyAdReason as enums.
const (
	HeavyAdReasonNotSet            HeavyAdReason = ""
	HeavyAdReasonNetworkTotalLimit HeavyAdReason = "NetworkTotalLimit"
	HeavyAdReasonCPUTotalLimit     HeavyAdReason = "CpuTotalLimit"
	HeavyAdReasonCPUPeakLimit      HeavyAdReason = "CpuPeakLimit"
)

func (e HeavyAdReason) Valid() bool {
	switch e {
	case "NetworkTotalLimit", "CpuTotalLimit", "CpuPeakLimit":
		return true
	default:
		return false
	}
}

func (e HeavyAdReason) String() string {
	return string(e)
}

// HeavyAdIssueDetails
type HeavyAdIssueDetails struct {
	Resolution HeavyAdResolutionStatus `json:"resolution"` // The resolution status, either blocking the content or warning.
	Reason     HeavyAdReason           `json:"reason"`     // The reason the ad was blocked, total network or cpu or peak cpu.
	Frame      AffectedFrame           `json:"frame"`      // The frame that was blocked.
}

// ContentSecurityPolicyViolationType
type ContentSecurityPolicyViolationType string

// ContentSecurityPolicyViolationType as enums.
const (
	ContentSecurityPolicyViolationTypeNotSet                       ContentSecurityPolicyViolationType = ""
	ContentSecurityPolicyViolationTypeKInlineViolation             ContentSecurityPolicyViolationType = "kInlineViolation"
	ContentSecurityPolicyViolationTypeKEvalViolation               ContentSecurityPolicyViolationType = "kEvalViolation"
	ContentSecurityPolicyViolationTypeKURLViolation                ContentSecurityPolicyViolationType = "kURLViolation"
	ContentSecurityPolicyViolationTypeKTrustedTypesSinkViolation   ContentSecurityPolicyViolationType = "kTrustedTypesSinkViolation"
	ContentSecurityPolicyViolationTypeKTrustedTypesPolicyViolation ContentSecurityPolicyViolationType = "kTrustedTypesPolicyViolation"
	ContentSecurityPolicyViolationTypeKWasmEvalViolation           ContentSecurityPolicyViolationType = "kWasmEvalViolation"
)

func (e ContentSecurityPolicyViolationType) Valid() bool {
	switch e {
	case "kInlineViolation", "kEvalViolation", "kURLViolation", "kTrustedTypesSinkViolation", "kTrustedTypesPolicyViolation", "kWasmEvalViolation":
		return true
	default:
		return false
	}
}

func (e ContentSecurityPolicyViolationType) String() string {
	return string(e)
}

// SourceCodeLocation
type SourceCodeLocation struct {
	ScriptID     *runtime.ScriptID `json:"scriptId,omitempty"` // No description.
	URL          string            `json:"url"`                // No description.
	LineNumber   int               `json:"lineNumber"`         // No description.
	ColumnNumber int               `json:"columnNumber"`       // No description.
}

// ContentSecurityPolicyIssueDetails
type ContentSecurityPolicyIssueDetails struct {
	BlockedURL                         *string                            `json:"blockedURL,omitempty"`               // The url not included in allowed sources.
	ViolatedDirective                  string                             `json:"violatedDirective"`                  // Specific directive that is violated, causing the CSP issue.
	IsReportOnly                       bool                               `json:"isReportOnly"`                       // No description.
	ContentSecurityPolicyViolationType ContentSecurityPolicyViolationType `json:"contentSecurityPolicyViolationType"` // No description.
	FrameAncestor                      *AffectedFrame                     `json:"frameAncestor,omitempty"`            // No description.
	SourceCodeLocation                 *SourceCodeLocation                `json:"sourceCodeLocation,omitempty"`       // No description.
	ViolatingNodeID                    *dom.BackendNodeID                 `json:"violatingNodeId,omitempty"`          // No description.
}

// SharedArrayBufferIssueType
type SharedArrayBufferIssueType string

// SharedArrayBufferIssueType as enums.
const (
	SharedArrayBufferIssueTypeNotSet        SharedArrayBufferIssueType = ""
	SharedArrayBufferIssueTypeTransferIssue SharedArrayBufferIssueType = "TransferIssue"
	SharedArrayBufferIssueTypeCreationIssue SharedArrayBufferIssueType = "CreationIssue"
)

func (e SharedArrayBufferIssueType) Valid() bool {
	switch e {
	case "TransferIssue", "CreationIssue":
		return true
	default:
		return false
	}
}

func (e SharedArrayBufferIssueType) String() string {
	return string(e)
}

// SharedArrayBufferIssueDetails Details for a issue arising from an SAB being
// instantiated in, or transferred to a context that is not cross-origin
// isolated.
type SharedArrayBufferIssueDetails struct {
	SourceCodeLocation SourceCodeLocation         `json:"sourceCodeLocation"` // No description.
	IsWarning          bool                       `json:"isWarning"`          // No description.
	Type               SharedArrayBufferIssueType `json:"type"`               // No description.
}

// TwaQualityEnforcementViolationType
type TwaQualityEnforcementViolationType string

// TwaQualityEnforcementViolationType as enums.
const (
	TwaQualityEnforcementViolationTypeNotSet              TwaQualityEnforcementViolationType = ""
	TwaQualityEnforcementViolationTypeKHttpError          TwaQualityEnforcementViolationType = "kHttpError"
	TwaQualityEnforcementViolationTypeKUnavailableOffline TwaQualityEnforcementViolationType = "kUnavailableOffline"
	TwaQualityEnforcementViolationTypeKDigitalAssetLinks  TwaQualityEnforcementViolationType = "kDigitalAssetLinks"
)

func (e TwaQualityEnforcementViolationType) Valid() bool {
	switch e {
	case "kHttpError", "kUnavailableOffline", "kDigitalAssetLinks":
		return true
	default:
		return false
	}
}

func (e TwaQualityEnforcementViolationType) String() string {
	return string(e)
}

// TrustedWebActivityIssueDetails
type TrustedWebActivityIssueDetails struct {
	URL            string                             `json:"url"`                      // The url that triggers the violation.
	ViolationType  TwaQualityEnforcementViolationType `json:"violationType"`            // No description.
	HTTPStatusCode *int                               `json:"httpStatusCode,omitempty"` // No description.
	PackageName    *string                            `json:"packageName,omitempty"`    // The package name of the Trusted Web Activity client app. This field is only used when violation type is kDigitalAssetLinks.
	Signature      *string                            `json:"signature,omitempty"`      // The signature of the Trusted Web Activity client app. This field is only used when violation type is kDigitalAssetLinks.
}

// LowTextContrastIssueDetails
type LowTextContrastIssueDetails struct {
	ViolatingNodeID       dom.BackendNodeID `json:"violatingNodeId"`       // No description.
	ViolatingNodeSelector string            `json:"violatingNodeSelector"` // No description.
	ContrastRatio         float64           `json:"contrastRatio"`         // No description.
	ThresholdAA           float64           `json:"thresholdAA"`           // No description.
	ThresholdAAA          float64           `json:"thresholdAAA"`          // No description.
	FontSize              string            `json:"fontSize"`              // No description.
	FontWeight            string            `json:"fontWeight"`            // No description.
}

// CORSIssueDetails Details for a CORS related issue, e.g. a warning or error
// related to CORS RFC1918 enforcement.
type CORSIssueDetails struct {
	CORSErrorStatus        network.CORSErrorStatus      `json:"corsErrorStatus"`                  // No description.
	IsWarning              bool                         `json:"isWarning"`                        // No description.
	Request                AffectedRequest              `json:"request"`                          // No description.
	Location               *SourceCodeLocation          `json:"location,omitempty"`               // No description.
	InitiatorOrigin        *string                      `json:"initiatorOrigin,omitempty"`        // No description.
	ResourceIPAddressSpace *network.IPAddressSpace      `json:"resourceIPAddressSpace,omitempty"` // No description.
	ClientSecurityState    *network.ClientSecurityState `json:"clientSecurityState,omitempty"`    // No description.
}

// AttributionReportingIssueType
type AttributionReportingIssueType string

// AttributionReportingIssueType as enums.
const (
	AttributionReportingIssueTypeNotSet                               AttributionReportingIssueType = ""
	AttributionReportingIssueTypePermissionPolicyDisabled             AttributionReportingIssueType = "PermissionPolicyDisabled"
	AttributionReportingIssueTypeAttributionSourceUntrustworthyOrigin AttributionReportingIssueType = "AttributionSourceUntrustworthyOrigin"
	AttributionReportingIssueTypeAttributionUntrustworthyOrigin       AttributionReportingIssueType = "AttributionUntrustworthyOrigin"
	AttributionReportingIssueTypeInvalidHeader                        AttributionReportingIssueType = "InvalidHeader"
)

func (e AttributionReportingIssueType) Valid() bool {
	switch e {
	case "PermissionPolicyDisabled", "AttributionSourceUntrustworthyOrigin", "AttributionUntrustworthyOrigin", "InvalidHeader":
		return true
	default:
		return false
	}
}

func (e AttributionReportingIssueType) String() string {
	return string(e)
}

// AttributionReportingIssueDetails Details for issues around "Attribution
// Reporting API" usage. Explainer:
// https://github.com/WICG/conversion-measurement-api
type AttributionReportingIssueDetails struct {
	ViolationType    AttributionReportingIssueType `json:"violationType"`              // No description.
	Frame            *AffectedFrame                `json:"frame,omitempty"`            // No description.
	Request          *AffectedRequest              `json:"request,omitempty"`          // No description.
	ViolatingNodeID  *dom.BackendNodeID            `json:"violatingNodeId,omitempty"`  // No description.
	InvalidParameter *string                       `json:"invalidParameter,omitempty"` // No description.
}

// QuirksModeIssueDetails Details for issues about documents in Quirks Mode or
// Limited Quirks Mode that affects page layouting.
type QuirksModeIssueDetails struct {
	IsLimitedQuirksMode bool              `json:"isLimitedQuirksMode"` // If false, it means the document's mode is "quirks" instead of "limited-quirks".
	DocumentNodeID      dom.BackendNodeID `json:"documentNodeId"`      // No description.
	URL                 string            `json:"url"`                 // No description.
	FrameID             page.FrameID      `json:"frameId"`             // No description.
	LoaderID            network.LoaderID  `json:"loaderId"`            // No description.
}

// NavigatorUserAgentIssueDetails
type NavigatorUserAgentIssueDetails struct {
	URL      string              `json:"url"`                // No description.
	Location *SourceCodeLocation `json:"location,omitempty"` // No description.
}

// GenericIssueErrorType
type GenericIssueErrorType string

// GenericIssueErrorType as enums.
const (
	GenericIssueErrorTypeNotSet                            GenericIssueErrorType = ""
	GenericIssueErrorTypeCrossOriginPortalPostMessageError GenericIssueErrorType = "CrossOriginPortalPostMessageError"
)

func (e GenericIssueErrorType) Valid() bool {
	switch e {
	case "CrossOriginPortalPostMessageError":
		return true
	default:
		return false
	}
}

func (e GenericIssueErrorType) String() string {
	return string(e)
}

// GenericIssueDetails Depending on the concrete errorType, different
// properties are set.
type GenericIssueDetails struct {
	ErrorType GenericIssueErrorType `json:"errorType"`         // Issues with the same errorType are aggregated in the frontend.
	FrameID   *page.FrameID         `json:"frameId,omitempty"` // No description.
}

// DeprecationIssueType
type DeprecationIssueType string

// DeprecationIssueType as enums.
const (
	DeprecationIssueTypeNotSet                                                    DeprecationIssueType = ""
	DeprecationIssueTypeAuthorizationCoveredByWildcard                            DeprecationIssueType = "AuthorizationCoveredByWildcard"
	DeprecationIssueTypeCanRequestURLHTTPContainingNewline                        DeprecationIssueType = "CanRequestURLHTTPContainingNewline"
	DeprecationIssueTypeChromeLoadTimesConnectionInfo                             DeprecationIssueType = "ChromeLoadTimesConnectionInfo"
	DeprecationIssueTypeChromeLoadTimesFirstPaintAfterLoadTime                    DeprecationIssueType = "ChromeLoadTimesFirstPaintAfterLoadTime"
	DeprecationIssueTypeChromeLoadTimesWasAlternateProtocolAvailable              DeprecationIssueType = "ChromeLoadTimesWasAlternateProtocolAvailable"
	DeprecationIssueTypeCookieWithTruncatingChar                                  DeprecationIssueType = "CookieWithTruncatingChar"
	DeprecationIssueTypeCrossOriginAccessBasedOnDocumentDomain                    DeprecationIssueType = "CrossOriginAccessBasedOnDocumentDomain"
	DeprecationIssueTypeCrossOriginWindowAlert                                    DeprecationIssueType = "CrossOriginWindowAlert"
	DeprecationIssueTypeCrossOriginWindowConfirm                                  DeprecationIssueType = "CrossOriginWindowConfirm"
	DeprecationIssueTypeCSSSelectorInternalMediaControlsOverlayCastButton         DeprecationIssueType = "CSSSelectorInternalMediaControlsOverlayCastButton"
	DeprecationIssueTypeDeprecationExample                                        DeprecationIssueType = "DeprecationExample"
	DeprecationIssueTypeDocumentDomainSettingWithoutOriginAgentClusterHeader      DeprecationIssueType = "DocumentDomainSettingWithoutOriginAgentClusterHeader"
	DeprecationIssueTypeEventPath                                                 DeprecationIssueType = "EventPath"
	DeprecationIssueTypeGeolocationInsecureOrigin                                 DeprecationIssueType = "GeolocationInsecureOrigin"
	DeprecationIssueTypeGeolocationInsecureOriginDeprecatedNotRemoved             DeprecationIssueType = "GeolocationInsecureOriginDeprecatedNotRemoved"
	DeprecationIssueTypeGetUserMediaInsecureOrigin                                DeprecationIssueType = "GetUserMediaInsecureOrigin"
	DeprecationIssueTypeHostCandidateAttributeGetter                              DeprecationIssueType = "HostCandidateAttributeGetter"
	DeprecationIssueTypeInsecurePrivateNetworkSubresourceRequest                  DeprecationIssueType = "InsecurePrivateNetworkSubresourceRequest"
	DeprecationIssueTypeLegacyConstraintGoogIPv6                                  DeprecationIssueType = "LegacyConstraintGoogIPv6"
	DeprecationIssueTypeLocalCSSFileExtensionRejected                             DeprecationIssueType = "LocalCSSFileExtensionRejected"
	DeprecationIssueTypeMediaSourceAbortRemove                                    DeprecationIssueType = "MediaSourceAbortRemove"
	DeprecationIssueTypeMediaSourceDurationTruncatingBuffered                     DeprecationIssueType = "MediaSourceDurationTruncatingBuffered"
	DeprecationIssueTypeNoSysexWebMIDIWithoutPermission                           DeprecationIssueType = "NoSysexWebMIDIWithoutPermission"
	DeprecationIssueTypeNotificationInsecureOrigin                                DeprecationIssueType = "NotificationInsecureOrigin"
	DeprecationIssueTypeNotificationPermissionRequestedIframe                     DeprecationIssueType = "NotificationPermissionRequestedIframe"
	DeprecationIssueTypeObsoleteWebRtcCipherSuite                                 DeprecationIssueType = "ObsoleteWebRtcCipherSuite"
	DeprecationIssueTypePaymentRequestBasicCard                                   DeprecationIssueType = "PaymentRequestBasicCard"
	DeprecationIssueTypePictureSourceSrc                                          DeprecationIssueType = "PictureSourceSrc"
	DeprecationIssueTypePrefixedCancelAnimationFrame                              DeprecationIssueType = "PrefixedCancelAnimationFrame"
	DeprecationIssueTypePrefixedRequestAnimationFrame                             DeprecationIssueType = "PrefixedRequestAnimationFrame"
	DeprecationIssueTypePrefixedStorageInfo                                       DeprecationIssueType = "PrefixedStorageInfo"
	DeprecationIssueTypePrefixedVideoDisplayingFullscreen                         DeprecationIssueType = "PrefixedVideoDisplayingFullscreen"
	DeprecationIssueTypePrefixedVideoEnterFullscreen                              DeprecationIssueType = "PrefixedVideoEnterFullscreen"
	DeprecationIssueTypePrefixedVideoEnterFullScreen                              DeprecationIssueType = "PrefixedVideoEnterFullScreen"
	DeprecationIssueTypePrefixedVideoExitFullscreen                               DeprecationIssueType = "PrefixedVideoExitFullscreen"
	DeprecationIssueTypePrefixedVideoExitFullScreen                               DeprecationIssueType = "PrefixedVideoExitFullScreen"
	DeprecationIssueTypePrefixedVideoSupportsFullscreen                           DeprecationIssueType = "PrefixedVideoSupportsFullscreen"
	DeprecationIssueTypeRangeExpand                                               DeprecationIssueType = "RangeExpand"
	DeprecationIssueTypeRequestedSubresourceWithEmbeddedCredentials               DeprecationIssueType = "RequestedSubresourceWithEmbeddedCredentials"
	DeprecationIssueTypeRTCConstraintEnableDtlsSrtpFalse                          DeprecationIssueType = "RTCConstraintEnableDtlsSrtpFalse"
	DeprecationIssueTypeRTCConstraintEnableDtlsSrtpTrue                           DeprecationIssueType = "RTCConstraintEnableDtlsSrtpTrue"
	DeprecationIssueTypeRTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics  DeprecationIssueType = "RTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics"
	DeprecationIssueTypeRTCPeerConnectionSdpSemanticsPlanB                        DeprecationIssueType = "RTCPeerConnectionSdpSemanticsPlanB"
	DeprecationIssueTypeRtcpMuxPolicyNegotiate                                    DeprecationIssueType = "RtcpMuxPolicyNegotiate"
	DeprecationIssueTypeSharedArrayBufferConstructedWithoutIsolation              DeprecationIssueType = "SharedArrayBufferConstructedWithoutIsolation"
	DeprecationIssueTypeTextToSpeechDisallowedByAutoplay                          DeprecationIssueType = "TextToSpeech_DisallowedByAutoplay"
	DeprecationIssueTypeV8SharedArrayBufferConstructedInExtensionWithoutIsolation DeprecationIssueType = "V8SharedArrayBufferConstructedInExtensionWithoutIsolation"
	DeprecationIssueTypeXHRJSONEncodingDetection                                  DeprecationIssueType = "XHRJSONEncodingDetection"
	DeprecationIssueTypeXMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload   DeprecationIssueType = "XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload"
	DeprecationIssueTypeXRSupportsSession                                         DeprecationIssueType = "XRSupportsSession"
)

func (e DeprecationIssueType) Valid() bool {
	switch e {
	case "AuthorizationCoveredByWildcard", "CanRequestURLHTTPContainingNewline", "ChromeLoadTimesConnectionInfo", "ChromeLoadTimesFirstPaintAfterLoadTime", "ChromeLoadTimesWasAlternateProtocolAvailable", "CookieWithTruncatingChar", "CrossOriginAccessBasedOnDocumentDomain", "CrossOriginWindowAlert", "CrossOriginWindowConfirm", "CSSSelectorInternalMediaControlsOverlayCastButton", "DeprecationExample", "DocumentDomainSettingWithoutOriginAgentClusterHeader", "EventPath", "GeolocationInsecureOrigin", "GeolocationInsecureOriginDeprecatedNotRemoved", "GetUserMediaInsecureOrigin", "HostCandidateAttributeGetter", "InsecurePrivateNetworkSubresourceRequest", "LegacyConstraintGoogIPv6", "LocalCSSFileExtensionRejected", "MediaSourceAbortRemove", "MediaSourceDurationTruncatingBuffered", "NoSysexWebMIDIWithoutPermission", "NotificationInsecureOrigin", "NotificationPermissionRequestedIframe", "ObsoleteWebRtcCipherSuite", "PaymentRequestBasicCard", "PictureSourceSrc", "PrefixedCancelAnimationFrame", "PrefixedRequestAnimationFrame", "PrefixedStorageInfo", "PrefixedVideoDisplayingFullscreen", "PrefixedVideoEnterFullscreen", "PrefixedVideoEnterFullScreen", "PrefixedVideoExitFullscreen", "PrefixedVideoExitFullScreen", "PrefixedVideoSupportsFullscreen", "RangeExpand", "RequestedSubresourceWithEmbeddedCredentials", "RTCConstraintEnableDtlsSrtpFalse", "RTCConstraintEnableDtlsSrtpTrue", "RTCPeerConnectionComplexPlanBSdpUsingDefaultSdpSemantics", "RTCPeerConnectionSdpSemanticsPlanB", "RtcpMuxPolicyNegotiate", "SharedArrayBufferConstructedWithoutIsolation", "TextToSpeech_DisallowedByAutoplay", "V8SharedArrayBufferConstructedInExtensionWithoutIsolation", "XHRJSONEncodingDetection", "XMLHttpRequestSynchronousInNonWorkerOutsideBeforeUnload", "XRSupportsSession":
		return true
	default:
		return false
	}
}

func (e DeprecationIssueType) String() string {
	return string(e)
}

// DeprecationIssueDetails This issue tracks information needed to print a
// deprecation message.
// https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/frame/third_party/blink/renderer/core/frame/deprecation/README.md
type DeprecationIssueDetails struct {
	AffectedFrame      *AffectedFrame       `json:"affectedFrame,omitempty"` // No description.
	SourceCodeLocation SourceCodeLocation   `json:"sourceCodeLocation"`      // No description.
	Type               DeprecationIssueType `json:"type"`                    // No description.
}

// ClientHintIssueReason
type ClientHintIssueReason string

// ClientHintIssueReason as enums.
const (
	ClientHintIssueReasonNotSet                        ClientHintIssueReason = ""
	ClientHintIssueReasonMetaTagAllowListInvalidOrigin ClientHintIssueReason = "MetaTagAllowListInvalidOrigin"
	ClientHintIssueReasonMetaTagModifiedHTML           ClientHintIssueReason = "MetaTagModifiedHTML"
)

func (e ClientHintIssueReason) Valid() bool {
	switch e {
	case "MetaTagAllowListInvalidOrigin", "MetaTagModifiedHTML":
		return true
	default:
		return false
	}
}

func (e ClientHintIssueReason) String() string {
	return string(e)
}

// FederatedAuthRequestIssueDetails
type FederatedAuthRequestIssueDetails struct {
	FederatedAuthRequestIssueReason FederatedAuthRequestIssueReason `json:"federatedAuthRequestIssueReason"` // No description.
}

// FederatedAuthRequestIssueReason Represents the failure reason when a
// federated authentication reason fails. Should be updated alongside
// RequestIdTokenStatus in
// third_party/blink/public/mojom/devtools/inspector_issue.mojom to include all
// cases except for success.
type FederatedAuthRequestIssueReason string

// FederatedAuthRequestIssueReason as enums.
const (
	FederatedAuthRequestIssueReasonNotSet                                FederatedAuthRequestIssueReason = ""
	FederatedAuthRequestIssueReasonApprovalDeclined                      FederatedAuthRequestIssueReason = "ApprovalDeclined"
	FederatedAuthRequestIssueReasonTooManyRequests                       FederatedAuthRequestIssueReason = "TooManyRequests"
	FederatedAuthRequestIssueReasonManifestListHTTPNotFound              FederatedAuthRequestIssueReason = "ManifestListHttpNotFound"
	FederatedAuthRequestIssueReasonManifestListNoResponse                FederatedAuthRequestIssueReason = "ManifestListNoResponse"
	FederatedAuthRequestIssueReasonManifestListInvalidResponse           FederatedAuthRequestIssueReason = "ManifestListInvalidResponse"
	FederatedAuthRequestIssueReasonManifestNotInManifestList             FederatedAuthRequestIssueReason = "ManifestNotInManifestList"
	FederatedAuthRequestIssueReasonManifestListTooBig                    FederatedAuthRequestIssueReason = "ManifestListTooBig"
	FederatedAuthRequestIssueReasonManifestHTTPNotFound                  FederatedAuthRequestIssueReason = "ManifestHttpNotFound"
	FederatedAuthRequestIssueReasonManifestNoResponse                    FederatedAuthRequestIssueReason = "ManifestNoResponse"
	FederatedAuthRequestIssueReasonManifestInvalidResponse               FederatedAuthRequestIssueReason = "ManifestInvalidResponse"
	FederatedAuthRequestIssueReasonClientMetadataHTTPNotFound            FederatedAuthRequestIssueReason = "ClientMetadataHttpNotFound"
	FederatedAuthRequestIssueReasonClientMetadataNoResponse              FederatedAuthRequestIssueReason = "ClientMetadataNoResponse"
	FederatedAuthRequestIssueReasonClientMetadataInvalidResponse         FederatedAuthRequestIssueReason = "ClientMetadataInvalidResponse"
	FederatedAuthRequestIssueReasonClientMetadataMissingPrivacyPolicyURL FederatedAuthRequestIssueReason = "ClientMetadataMissingPrivacyPolicyUrl"
	FederatedAuthRequestIssueReasonDisabledInSettings                    FederatedAuthRequestIssueReason = "DisabledInSettings"
	FederatedAuthRequestIssueReasonErrorFetchingSignin                   FederatedAuthRequestIssueReason = "ErrorFetchingSignin"
	FederatedAuthRequestIssueReasonInvalidSigninResponse                 FederatedAuthRequestIssueReason = "InvalidSigninResponse"
	FederatedAuthRequestIssueReasonAccountsHTTPNotFound                  FederatedAuthRequestIssueReason = "AccountsHttpNotFound"
	FederatedAuthRequestIssueReasonAccountsNoResponse                    FederatedAuthRequestIssueReason = "AccountsNoResponse"
	FederatedAuthRequestIssueReasonAccountsInvalidResponse               FederatedAuthRequestIssueReason = "AccountsInvalidResponse"
	FederatedAuthRequestIssueReasonIDTokenHTTPNotFound                   FederatedAuthRequestIssueReason = "IdTokenHttpNotFound"
	FederatedAuthRequestIssueReasonIDTokenNoResponse                     FederatedAuthRequestIssueReason = "IdTokenNoResponse"
	FederatedAuthRequestIssueReasonIDTokenInvalidResponse                FederatedAuthRequestIssueReason = "IdTokenInvalidResponse"
	FederatedAuthRequestIssueReasonIDTokenInvalidRequest                 FederatedAuthRequestIssueReason = "IdTokenInvalidRequest"
	FederatedAuthRequestIssueReasonErrorIDToken                          FederatedAuthRequestIssueReason = "ErrorIdToken"
	FederatedAuthRequestIssueReasonCanceled                              FederatedAuthRequestIssueReason = "Canceled"
)

func (e FederatedAuthRequestIssueReason) Valid() bool {
	switch e {
	case "ApprovalDeclined", "TooManyRequests", "ManifestListHttpNotFound", "ManifestListNoResponse", "ManifestListInvalidResponse", "ManifestNotInManifestList", "ManifestListTooBig", "ManifestHttpNotFound", "ManifestNoResponse", "ManifestInvalidResponse", "ClientMetadataHttpNotFound", "ClientMetadataNoResponse", "ClientMetadataInvalidResponse", "ClientMetadataMissingPrivacyPolicyUrl", "DisabledInSettings", "ErrorFetchingSignin", "InvalidSigninResponse", "AccountsHttpNotFound", "AccountsNoResponse", "AccountsInvalidResponse", "IdTokenHttpNotFound", "IdTokenNoResponse", "IdTokenInvalidResponse", "IdTokenInvalidRequest", "ErrorIdToken", "Canceled":
		return true
	default:
		return false
	}
}

func (e FederatedAuthRequestIssueReason) String() string {
	return string(e)
}

// ClientHintIssueDetails This issue tracks client hints related issues. It's
// used to deprecate old features, encourage the use of new ones, and provide
// general guidance.
type ClientHintIssueDetails struct {
	SourceCodeLocation    SourceCodeLocation    `json:"sourceCodeLocation"`    // No description.
	ClientHintIssueReason ClientHintIssueReason `json:"clientHintIssueReason"` // No description.
}

// InspectorIssueCode A unique identifier for the type of issue. Each type may
// use one of the optional fields in InspectorIssueDetails to convey more
// specific information about the kind of issue.
type InspectorIssueCode string

// InspectorIssueCode as enums.
const (
	InspectorIssueCodeNotSet                     InspectorIssueCode = ""
	InspectorIssueCodeCookieIssue                InspectorIssueCode = "CookieIssue"
	InspectorIssueCodeMixedContentIssue          InspectorIssueCode = "MixedContentIssue"
	InspectorIssueCodeBlockedByResponseIssue     InspectorIssueCode = "BlockedByResponseIssue"
	InspectorIssueCodeHeavyAdIssue               InspectorIssueCode = "HeavyAdIssue"
	InspectorIssueCodeContentSecurityPolicyIssue InspectorIssueCode = "ContentSecurityPolicyIssue"
	InspectorIssueCodeSharedArrayBufferIssue     InspectorIssueCode = "SharedArrayBufferIssue"
	InspectorIssueCodeTrustedWebActivityIssue    InspectorIssueCode = "TrustedWebActivityIssue"
	InspectorIssueCodeLowTextContrastIssue       InspectorIssueCode = "LowTextContrastIssue"
	InspectorIssueCodeCORSIssue                  InspectorIssueCode = "CorsIssue"
	InspectorIssueCodeAttributionReportingIssue  InspectorIssueCode = "AttributionReportingIssue"
	InspectorIssueCodeQuirksModeIssue            InspectorIssueCode = "QuirksModeIssue"
	InspectorIssueCodeNavigatorUserAgentIssue    InspectorIssueCode = "NavigatorUserAgentIssue"
	InspectorIssueCodeGenericIssue               InspectorIssueCode = "GenericIssue"
	InspectorIssueCodeDeprecationIssue           InspectorIssueCode = "DeprecationIssue"
	InspectorIssueCodeClientHintIssue            InspectorIssueCode = "ClientHintIssue"
	InspectorIssueCodeFederatedAuthRequestIssue  InspectorIssueCode = "FederatedAuthRequestIssue"
)

func (e InspectorIssueCode) Valid() bool {
	switch e {
	case "CookieIssue", "MixedContentIssue", "BlockedByResponseIssue", "HeavyAdIssue", "ContentSecurityPolicyIssue", "SharedArrayBufferIssue", "TrustedWebActivityIssue", "LowTextContrastIssue", "CorsIssue", "AttributionReportingIssue", "QuirksModeIssue", "NavigatorUserAgentIssue", "GenericIssue", "DeprecationIssue", "ClientHintIssue", "FederatedAuthRequestIssue":
		return true
	default:
		return false
	}
}

func (e InspectorIssueCode) String() string {
	return string(e)
}

// InspectorIssueDetails This struct holds a list of optional fields with
// additional information specific to the kind of issue. When adding a new
// issue code, please also add a new optional field to this type.
type InspectorIssueDetails struct {
	CookieIssueDetails                *CookieIssueDetails                `json:"cookieIssueDetails,omitempty"`                // No description.
	MixedContentIssueDetails          *MixedContentIssueDetails          `json:"mixedContentIssueDetails,omitempty"`          // No description.
	BlockedByResponseIssueDetails     *BlockedByResponseIssueDetails     `json:"blockedByResponseIssueDetails,omitempty"`     // No description.
	HeavyAdIssueDetails               *HeavyAdIssueDetails               `json:"heavyAdIssueDetails,omitempty"`               // No description.
	ContentSecurityPolicyIssueDetails *ContentSecurityPolicyIssueDetails `json:"contentSecurityPolicyIssueDetails,omitempty"` // No description.
	SharedArrayBufferIssueDetails     *SharedArrayBufferIssueDetails     `json:"sharedArrayBufferIssueDetails,omitempty"`     // No description.
	TwaQualityEnforcementDetails      *TrustedWebActivityIssueDetails    `json:"twaQualityEnforcementDetails,omitempty"`      // No description.
	LowTextContrastIssueDetails       *LowTextContrastIssueDetails       `json:"lowTextContrastIssueDetails,omitempty"`       // No description.
	CORSIssueDetails                  *CORSIssueDetails                  `json:"corsIssueDetails,omitempty"`                  // No description.
	AttributionReportingIssueDetails  *AttributionReportingIssueDetails  `json:"attributionReportingIssueDetails,omitempty"`  // No description.
	QuirksModeIssueDetails            *QuirksModeIssueDetails            `json:"quirksModeIssueDetails,omitempty"`            // No description.
	NavigatorUserAgentIssueDetails    *NavigatorUserAgentIssueDetails    `json:"navigatorUserAgentIssueDetails,omitempty"`    // No description.
	GenericIssueDetails               *GenericIssueDetails               `json:"genericIssueDetails,omitempty"`               // No description.
	DeprecationIssueDetails           *DeprecationIssueDetails           `json:"deprecationIssueDetails,omitempty"`           // No description.
	ClientHintIssueDetails            *ClientHintIssueDetails            `json:"clientHintIssueDetails,omitempty"`            // No description.
	FederatedAuthRequestIssueDetails  *FederatedAuthRequestIssueDetails  `json:"federatedAuthRequestIssueDetails,omitempty"`  // No description.
}

// IssueID A unique id for a DevTools inspector issue. Allows other entities
// (e.g. exceptions, CDP message, console messages, etc.) to reference an
// issue.
type IssueID string

// InspectorIssue An inspector issue reported from the back-end.
type InspectorIssue struct {
	Code    InspectorIssueCode    `json:"code"`              // No description.
	Details InspectorIssueDetails `json:"details"`           // No description.
	IssueID *IssueID              `json:"issueId,omitempty"` // A unique id for this issue. May be omitted if no other entity (e.g. exception, CDP message, etc.) is referencing this issue.
}
