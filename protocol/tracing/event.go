// Code generated by cdpgen. DO NOT EDIT.

package tracing

import (
	"encoding/json"

	"github.com/mafredri/cdp/protocol/io"
	"github.com/mafredri/cdp/rpcc"
)

// BufferUsageClient is a client for BufferUsage events.
type BufferUsageClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*BufferUsageReply, error)
	rpcc.Stream
}

// BufferUsageReply is the reply for BufferUsage events.
type BufferUsageReply struct {
	PercentFull *float64 `json:"percentFull,omitempty"` // A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
	EventCount  *float64 `json:"eventCount,omitempty"`  // An approximate number of events in the trace log.
	Value       *float64 `json:"value,omitempty"`       // A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size.
}

// DataCollectedClient is a client for DataCollected events. Contains an
// bucket of collected trace events. When tracing is stopped collected events
// will be send as a sequence of dataCollected events followed by
// tracingComplete event.
type DataCollectedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DataCollectedReply, error)
	rpcc.Stream
}

// DataCollectedReply is the reply for DataCollected events.
type DataCollectedReply struct {
	Value []json.RawMessage `json:"value"` // No description.
}

// CompleteClient is a client for TracingComplete events. Signals that tracing
// is stopped and there is no trace buffers pending flush, all data were
// delivered via dataCollected events.
type CompleteClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*CompleteReply, error)
	rpcc.Stream
}

// CompleteReply is the reply for TracingComplete events.
type CompleteReply struct {
	DataLossOccurred  bool              `json:"dataLossOccurred"`            // Indicates whether some trace data is known to have been lost, e.g. because the trace ring buffer wrapped around.
	Stream            *io.StreamHandle  `json:"stream,omitempty"`            // A handle of the stream that holds resulting trace data.
	TraceFormat       StreamFormat      `json:"traceFormat,omitempty"`       // Trace data format of returned stream.
	StreamCompression StreamCompression `json:"streamCompression,omitempty"` // Compression format of returned stream.
}
