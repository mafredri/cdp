// Code generated by cdpgen. DO NOT EDIT.

package overlay

import (
	"github.com/mafredri/cdp/protocol/dom"
)

// SourceOrderConfig Configuration data for drawing the source order of an
// elements children.
type SourceOrderConfig struct {
	ParentOutlineColor dom.RGBA `json:"parentOutlineColor"` // the color to outline the givent element in.
	ChildOutlineColor  dom.RGBA `json:"childOutlineColor"`  // the color to outline the child elements in.
}

// GridHighlightConfig Configuration data for the highlighting of Grid
// elements.
type GridHighlightConfig struct {
	ShowGridExtensionLines  *bool     `json:"showGridExtensionLines,omitempty"`  // Whether the extension lines from grid cells to the rulers should be shown (default: false).
	ShowPositiveLineNumbers *bool     `json:"showPositiveLineNumbers,omitempty"` // Show Positive line number labels (default: false).
	ShowNegativeLineNumbers *bool     `json:"showNegativeLineNumbers,omitempty"` // Show Negative line number labels (default: false).
	ShowAreaNames           *bool     `json:"showAreaNames,omitempty"`           // Show area name labels (default: false).
	ShowLineNames           *bool     `json:"showLineNames,omitempty"`           // Show line name labels (default: false).
	ShowTrackSizes          *bool     `json:"showTrackSizes,omitempty"`          // Show track size labels (default: false).
	GridBorderColor         *dom.RGBA `json:"gridBorderColor,omitempty"`         // The grid container border highlight color (default: transparent).
	// CellBorderColor is deprecated.
	//
	// Deprecated: The cell border color (default: transparent).
	// Deprecated, please use rowLineColor and columnLineColor instead.
	CellBorderColor *dom.RGBA `json:"cellBorderColor,omitempty"`
	RowLineColor    *dom.RGBA `json:"rowLineColor,omitempty"`    // The row line color (default: transparent).
	ColumnLineColor *dom.RGBA `json:"columnLineColor,omitempty"` // The column line color (default: transparent).
	GridBorderDash  *bool     `json:"gridBorderDash,omitempty"`  // Whether the grid border is dashed (default: false).
	// CellBorderDash is deprecated.
	//
	// Deprecated: Whether the cell border is dashed (default: false).
	// Deprecated, please us rowLineDash and columnLineDash instead.
	CellBorderDash      *bool     `json:"cellBorderDash,omitempty"`
	RowLineDash         *bool     `json:"rowLineDash,omitempty"`         // Whether row lines are dashed (default: false).
	ColumnLineDash      *bool     `json:"columnLineDash,omitempty"`      // Whether column lines are dashed (default: false).
	RowGapColor         *dom.RGBA `json:"rowGapColor,omitempty"`         // The row gap highlight fill color (default: transparent).
	RowHatchColor       *dom.RGBA `json:"rowHatchColor,omitempty"`       // The row gap hatching fill color (default: transparent).
	ColumnGapColor      *dom.RGBA `json:"columnGapColor,omitempty"`      // The column gap highlight fill color (default: transparent).
	ColumnHatchColor    *dom.RGBA `json:"columnHatchColor,omitempty"`    // The column gap hatching fill color (default: transparent).
	AreaBorderColor     *dom.RGBA `json:"areaBorderColor,omitempty"`     // The named grid areas border color (Default: transparent).
	GridBackgroundColor *dom.RGBA `json:"gridBackgroundColor,omitempty"` // The grid container background color (Default: transparent).
}

// FlexContainerHighlightConfig Configuration data for the highlighting of
// Flex container elements.
type FlexContainerHighlightConfig struct {
	ContainerBorder       *LineStyle `json:"containerBorder,omitempty"`       // The style of the container border
	LineSeparator         *LineStyle `json:"lineSeparator,omitempty"`         // The style of the separator between lines
	ItemSeparator         *LineStyle `json:"itemSeparator,omitempty"`         // The style of the separator between items
	MainDistributedSpace  *BoxStyle  `json:"mainDistributedSpace,omitempty"`  // Style of content-distribution space on the main axis (justify-content).
	CrossDistributedSpace *BoxStyle  `json:"crossDistributedSpace,omitempty"` // Style of content-distribution space on the cross axis (align-content).
	RowGapSpace           *BoxStyle  `json:"rowGapSpace,omitempty"`           // Style of empty space caused by row gaps (gap/row-gap).
	ColumnGapSpace        *BoxStyle  `json:"columnGapSpace,omitempty"`        // Style of empty space caused by columns gaps (gap/column-gap).
	CrossAlignment        *LineStyle `json:"crossAlignment,omitempty"`        // Style of the self-alignment line (align-items).
}

// FlexItemHighlightConfig Configuration data for the highlighting of Flex
// item elements.
type FlexItemHighlightConfig struct {
	BaseSizeBox      *BoxStyle  `json:"baseSizeBox,omitempty"`      // Style of the box representing the item's base size
	BaseSizeBorder   *LineStyle `json:"baseSizeBorder,omitempty"`   // Style of the border around the box representing the item's base size
	FlexibilityArrow *LineStyle `json:"flexibilityArrow,omitempty"` // Style of the arrow representing if the item grew or shrank
}

// LineStyle Style information for drawing a line.
type LineStyle struct {
	Color *dom.RGBA `json:"color,omitempty"` // The color of the line (default: transparent)
	// Pattern The line pattern (default: solid)
	//
	// Values: "dashed", "dotted".
	Pattern *string `json:"pattern,omitempty"`
}

// BoxStyle Style information for drawing a box.
type BoxStyle struct {
	FillColor  *dom.RGBA `json:"fillColor,omitempty"`  // The background color for the box (default: transparent)
	HatchColor *dom.RGBA `json:"hatchColor,omitempty"` // The hatching color for the box (default: transparent)
}

// ContrastAlgorithm
type ContrastAlgorithm string

// ContrastAlgorithm as enums.
const (
	ContrastAlgorithmNotSet ContrastAlgorithm = ""
	ContrastAlgorithmAa     ContrastAlgorithm = "aa"
	ContrastAlgorithmAaa    ContrastAlgorithm = "aaa"
	ContrastAlgorithmApca   ContrastAlgorithm = "apca"
)

func (e ContrastAlgorithm) Valid() bool {
	switch e {
	case "aa", "aaa", "apca":
		return true
	default:
		return false
	}
}

func (e ContrastAlgorithm) String() string {
	return string(e)
}

// HighlightConfig Configuration data for the highlighting of page elements.
type HighlightConfig struct {
	ShowInfo                               *bool                                   `json:"showInfo,omitempty"`                               // Whether the node info tooltip should be shown (default: false).
	ShowStyles                             *bool                                   `json:"showStyles,omitempty"`                             // Whether the node styles in the tooltip (default: false).
	ShowRulers                             *bool                                   `json:"showRulers,omitempty"`                             // Whether the rulers should be shown (default: false).
	ShowAccessibilityInfo                  *bool                                   `json:"showAccessibilityInfo,omitempty"`                  // Whether the a11y info should be shown (default: true).
	ShowExtensionLines                     *bool                                   `json:"showExtensionLines,omitempty"`                     // Whether the extension lines from node to the rulers should be shown (default: false).
	ContentColor                           *dom.RGBA                               `json:"contentColor,omitempty"`                           // The content box highlight fill color (default: transparent).
	PaddingColor                           *dom.RGBA                               `json:"paddingColor,omitempty"`                           // The padding highlight fill color (default: transparent).
	BorderColor                            *dom.RGBA                               `json:"borderColor,omitempty"`                            // The border highlight fill color (default: transparent).
	MarginColor                            *dom.RGBA                               `json:"marginColor,omitempty"`                            // The margin highlight fill color (default: transparent).
	EventTargetColor                       *dom.RGBA                               `json:"eventTargetColor,omitempty"`                       // The event target element highlight fill color (default: transparent).
	ShapeColor                             *dom.RGBA                               `json:"shapeColor,omitempty"`                             // The shape outside fill color (default: transparent).
	ShapeMarginColor                       *dom.RGBA                               `json:"shapeMarginColor,omitempty"`                       // The shape margin fill color (default: transparent).
	CSSGridColor                           *dom.RGBA                               `json:"cssGridColor,omitempty"`                           // The grid layout color (default: transparent).
	ColorFormat                            ColorFormat                             `json:"colorFormat,omitempty"`                            // The color format used to format color styles (default: hex).
	GridHighlightConfig                    *GridHighlightConfig                    `json:"gridHighlightConfig,omitempty"`                    // The grid layout highlight configuration (default: all transparent).
	FlexContainerHighlightConfig           *FlexContainerHighlightConfig           `json:"flexContainerHighlightConfig,omitempty"`           // The flex container highlight configuration (default: all transparent).
	FlexItemHighlightConfig                *FlexItemHighlightConfig                `json:"flexItemHighlightConfig,omitempty"`                // The flex item highlight configuration (default: all transparent).
	ContrastAlgorithm                      ContrastAlgorithm                       `json:"contrastAlgorithm,omitempty"`                      // The contrast algorithm to use for the contrast ratio (default: aa).
	ContainerQueryContainerHighlightConfig *ContainerQueryContainerHighlightConfig `json:"containerQueryContainerHighlightConfig,omitempty"` // The container query container highlight configuration (default: all transparent).
}

// ColorFormat
type ColorFormat string

// ColorFormat as enums.
const (
	ColorFormatNotSet ColorFormat = ""
	ColorFormatRGB    ColorFormat = "rgb"
	ColorFormatHSL    ColorFormat = "hsl"
	ColorFormatHWB    ColorFormat = "hwb"
	ColorFormatHex    ColorFormat = "hex"
)

func (e ColorFormat) Valid() bool {
	switch e {
	case "rgb", "hsl", "hwb", "hex":
		return true
	default:
		return false
	}
}

func (e ColorFormat) String() string {
	return string(e)
}

// GridNodeHighlightConfig Configurations for Persistent Grid Highlight
type GridNodeHighlightConfig struct {
	GridHighlightConfig GridHighlightConfig `json:"gridHighlightConfig"` // A descriptor for the highlight appearance.
	NodeID              dom.NodeID          `json:"nodeId"`              // Identifier of the node to highlight.
}

// FlexNodeHighlightConfig
type FlexNodeHighlightConfig struct {
	FlexContainerHighlightConfig FlexContainerHighlightConfig `json:"flexContainerHighlightConfig"` // A descriptor for the highlight appearance of flex containers.
	NodeID                       dom.NodeID                   `json:"nodeId"`                       // Identifier of the node to highlight.
}

// ScrollSnapContainerHighlightConfig
type ScrollSnapContainerHighlightConfig struct {
	SnapportBorder     *LineStyle `json:"snapportBorder,omitempty"`     // The style of the snapport border (default: transparent)
	SnapAreaBorder     *LineStyle `json:"snapAreaBorder,omitempty"`     // The style of the snap area border (default: transparent)
	ScrollMarginColor  *dom.RGBA  `json:"scrollMarginColor,omitempty"`  // The margin highlight fill color (default: transparent).
	ScrollPaddingColor *dom.RGBA  `json:"scrollPaddingColor,omitempty"` // The padding highlight fill color (default: transparent).
}

// ScrollSnapHighlightConfig
type ScrollSnapHighlightConfig struct {
	ScrollSnapContainerHighlightConfig ScrollSnapContainerHighlightConfig `json:"scrollSnapContainerHighlightConfig"` // A descriptor for the highlight appearance of scroll snap containers.
	NodeID                             dom.NodeID                         `json:"nodeId"`                             // Identifier of the node to highlight.
}

// HingeConfig Configuration for dual screen hinge
type HingeConfig struct {
	Rect         dom.Rect  `json:"rect"`                   // A rectangle represent hinge
	ContentColor *dom.RGBA `json:"contentColor,omitempty"` // The content box highlight fill color (default: a dark color).
	OutlineColor *dom.RGBA `json:"outlineColor,omitempty"` // The content box highlight outline color (default: transparent).
}

// ContainerQueryHighlightConfig
type ContainerQueryHighlightConfig struct {
	ContainerQueryContainerHighlightConfig ContainerQueryContainerHighlightConfig `json:"containerQueryContainerHighlightConfig"` // A descriptor for the highlight appearance of container query containers.
	NodeID                                 dom.NodeID                             `json:"nodeId"`                                 // Identifier of the container node to highlight.
}

// ContainerQueryContainerHighlightConfig
type ContainerQueryContainerHighlightConfig struct {
	ContainerBorder  *LineStyle `json:"containerBorder,omitempty"`  // The style of the container border.
	DescendantBorder *LineStyle `json:"descendantBorder,omitempty"` // The style of the descendants' borders.
}

// IsolatedElementHighlightConfig
type IsolatedElementHighlightConfig struct {
	IsolationModeHighlightConfig IsolationModeHighlightConfig `json:"isolationModeHighlightConfig"` // A descriptor for the highlight appearance of an element in isolation mode.
	NodeID                       dom.NodeID                   `json:"nodeId"`                       // Identifier of the isolated element to highlight.
}

// IsolationModeHighlightConfig
type IsolationModeHighlightConfig struct {
	ResizerColor       *dom.RGBA `json:"resizerColor,omitempty"`       // The fill color of the resizers (default: transparent).
	ResizerHandleColor *dom.RGBA `json:"resizerHandleColor,omitempty"` // The fill color for resizer handles (default: transparent).
	MaskColor          *dom.RGBA `json:"maskColor,omitempty"`          // The fill color for the mask covering non-isolated elements (default: transparent).
}

// InspectMode
type InspectMode string

// InspectMode as enums.
const (
	InspectModeNotSet                InspectMode = ""
	InspectModeSearchForNode         InspectMode = "searchForNode"
	InspectModeSearchForUAShadowDOM  InspectMode = "searchForUAShadowDOM"
	InspectModeCaptureAreaScreenshot InspectMode = "captureAreaScreenshot"
	InspectModeShowDistances         InspectMode = "showDistances"
	InspectModeNone                  InspectMode = "none"
)

func (e InspectMode) Valid() bool {
	switch e {
	case "searchForNode", "searchForUAShadowDOM", "captureAreaScreenshot", "showDistances", "none":
		return true
	default:
		return false
	}
}

func (e InspectMode) String() string {
	return string(e)
}
