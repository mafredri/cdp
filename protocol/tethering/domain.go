// Code generated by cdpgen. DO NOT EDIT.

// Package tethering implements the Tethering domain. The Tethering domain
// defines methods and events for browser port binding.
package tethering

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Tethering domain. The Tethering domain
// defines methods and events for browser port binding.
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the Tethering domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the Tethering domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// Bind invokes the Tethering method. Request browser port binding.
func (d *domainClient) Bind(ctx context.Context, args *BindArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Tethering.bind", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Tethering.bind", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Tethering", Op: "Bind", Err: err}
	}
	return
}

// Unbind invokes the Tethering method. Request browser port unbinding.
func (d *domainClient) Unbind(ctx context.Context, args *UnbindArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Tethering.unbind", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Tethering.unbind", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Tethering", Op: "Unbind", Err: err}
	}
	return
}

func (d *domainClient) Accepted(ctx context.Context) (AcceptedClient, error) {
	s, err := rpcc.NewStream(ctx, "Tethering.accepted", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &acceptedClient{Stream: s}, nil
}

type acceptedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *acceptedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *acceptedClient) Recv() (*AcceptedReply, error) {
	event := new(AcceptedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Tethering", Op: "Accepted Recv", Err: err}
	}
	return event, nil
}
