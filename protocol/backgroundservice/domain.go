// Code generated by cdpgen. DO NOT EDIT.

// Package backgroundservice implements the BackgroundService domain. Defines
// events for background web platform features.
package backgroundservice

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the BackgroundService domain. Defines events
// for background web platform features.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the BackgroundService domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// StartObserving invokes the BackgroundService method. Enables event updates
// for the service.
func (d *domainClient) StartObserving(ctx context.Context, args *StartObservingArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "BackgroundService.startObserving", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "BackgroundService.startObserving", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "BackgroundService", Op: "StartObserving", Err: err}
	}
	return
}

// StopObserving invokes the BackgroundService method. Disables event updates
// for the service.
func (d *domainClient) StopObserving(ctx context.Context, args *StopObservingArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "BackgroundService.stopObserving", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "BackgroundService.stopObserving", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "BackgroundService", Op: "StopObserving", Err: err}
	}
	return
}

// SetRecording invokes the BackgroundService method. Set the recording state
// for the service.
func (d *domainClient) SetRecording(ctx context.Context, args *SetRecordingArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "BackgroundService.setRecording", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "BackgroundService.setRecording", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "BackgroundService", Op: "SetRecording", Err: err}
	}
	return
}

// ClearEvents invokes the BackgroundService method. Clears all stored data
// for the service.
func (d *domainClient) ClearEvents(ctx context.Context, args *ClearEventsArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "BackgroundService.clearEvents", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "BackgroundService.clearEvents", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "BackgroundService", Op: "ClearEvents", Err: err}
	}
	return
}

func (d *domainClient) RecordingStateChanged(ctx context.Context) (RecordingStateChangedClient, error) {
	s, err := rpcc.NewStream(ctx, "BackgroundService.recordingStateChanged", d.conn)
	if err != nil {
		return nil, err
	}
	return &recordingStateChangedClient{Stream: s}, nil
}

type recordingStateChangedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *recordingStateChangedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *recordingStateChangedClient) Recv() (*RecordingStateChangedReply, error) {
	event := new(RecordingStateChangedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "BackgroundService", Op: "RecordingStateChanged Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) BackgroundServiceEventReceived(ctx context.Context) (EventReceivedClient, error) {
	s, err := rpcc.NewStream(ctx, "BackgroundService.backgroundServiceEventReceived", d.conn)
	if err != nil {
		return nil, err
	}
	return &eventReceivedClient{Stream: s}, nil
}

type eventReceivedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *eventReceivedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *eventReceivedClient) Recv() (*EventReceivedReply, error) {
	event := new(EventReceivedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "BackgroundService", Op: "BackgroundServiceEventReceived Recv", Err: err}
	}
	return event, nil
}
