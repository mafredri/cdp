// Code generated by cdpgen. DO NOT EDIT.

package backgroundservice

import (
	"github.com/mafredri/cdp/rpcc"
)

// RecordingStateChangedClient is a client for RecordingStateChanged events.
// Called when the recording state for the service has been updated.
type RecordingStateChangedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*RecordingStateChangedReply, error)
	rpcc.Stream
}

// RecordingStateChangedReply is the reply for RecordingStateChanged events.
type RecordingStateChangedReply struct {
	IsRecording bool        `json:"isRecording"` // No description.
	Service     ServiceName `json:"service"`     // No description.
}

// EventReceivedClient is a client for BackgroundServiceEventReceived events.
// Called with all existing backgroundServiceEvents when enabled, and all new
// events afterwards if enabled and recording.
type EventReceivedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*EventReceivedReply, error)
	rpcc.Stream
}

// EventReceivedReply is the reply for BackgroundServiceEventReceived events.
type EventReceivedReply struct {
	BackgroundServiceEvent Event `json:"backgroundServiceEvent"` // No description.
}
