// Code generated by cdpgen. DO NOT EDIT.

// Package domdebugger implements the DOMDebugger domain. DOM debugging allows
// setting breakpoints on particular DOM operations and events. JavaScript
// execution will stop on these operations as if there was a regular breakpoint
// set.
package domdebugger

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the DOMDebugger domain. DOM debugging allows
// setting breakpoints on particular DOM operations and events. JavaScript
// execution will stop on these operations as if there was a regular breakpoint
// set.
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the DOMDebugger domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the DOMDebugger domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// GetEventListeners invokes the DOMDebugger method. Returns event listeners
// of the given object.
func (d *domainClient) GetEventListeners(ctx context.Context, args *GetEventListenersArgs) (reply *GetEventListenersReply, err error) {
	reply = new(GetEventListenersReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.getEventListeners", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.getEventListeners", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DOMDebugger", Op: "GetEventListeners", Err: err}
	}
	return
}

// RemoveDOMBreakpoint invokes the DOMDebugger method. Removes DOM breakpoint
// that was set using `setDOMBreakpoint`.
func (d *domainClient) RemoveDOMBreakpoint(ctx context.Context, args *RemoveDOMBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.removeDOMBreakpoint", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.removeDOMBreakpoint", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DOMDebugger", Op: "RemoveDOMBreakpoint", Err: err}
	}
	return
}

// RemoveEventListenerBreakpoint invokes the DOMDebugger method. Removes
// breakpoint on particular DOM event.
func (d *domainClient) RemoveEventListenerBreakpoint(ctx context.Context, args *RemoveEventListenerBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.removeEventListenerBreakpoint", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.removeEventListenerBreakpoint", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DOMDebugger", Op: "RemoveEventListenerBreakpoint", Err: err}
	}
	return
}

// RemoveInstrumentationBreakpoint invokes the DOMDebugger method. Removes
// breakpoint on particular native event.
func (d *domainClient) RemoveInstrumentationBreakpoint(ctx context.Context, args *RemoveInstrumentationBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.removeInstrumentationBreakpoint", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.removeInstrumentationBreakpoint", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DOMDebugger", Op: "RemoveInstrumentationBreakpoint", Err: err}
	}
	return
}

// RemoveXHRBreakpoint invokes the DOMDebugger method. Removes breakpoint from
// XMLHttpRequest.
func (d *domainClient) RemoveXHRBreakpoint(ctx context.Context, args *RemoveXHRBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.removeXHRBreakpoint", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.removeXHRBreakpoint", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DOMDebugger", Op: "RemoveXHRBreakpoint", Err: err}
	}
	return
}

// SetDOMBreakpoint invokes the DOMDebugger method. Sets breakpoint on
// particular operation with DOM.
func (d *domainClient) SetDOMBreakpoint(ctx context.Context, args *SetDOMBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.setDOMBreakpoint", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.setDOMBreakpoint", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DOMDebugger", Op: "SetDOMBreakpoint", Err: err}
	}
	return
}

// SetEventListenerBreakpoint invokes the DOMDebugger method. Sets breakpoint
// on particular DOM event.
func (d *domainClient) SetEventListenerBreakpoint(ctx context.Context, args *SetEventListenerBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.setEventListenerBreakpoint", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.setEventListenerBreakpoint", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DOMDebugger", Op: "SetEventListenerBreakpoint", Err: err}
	}
	return
}

// SetInstrumentationBreakpoint invokes the DOMDebugger method. Sets
// breakpoint on particular native event.
func (d *domainClient) SetInstrumentationBreakpoint(ctx context.Context, args *SetInstrumentationBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.setInstrumentationBreakpoint", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.setInstrumentationBreakpoint", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DOMDebugger", Op: "SetInstrumentationBreakpoint", Err: err}
	}
	return
}

// SetXHRBreakpoint invokes the DOMDebugger method. Sets breakpoint on
// XMLHttpRequest.
func (d *domainClient) SetXHRBreakpoint(ctx context.Context, args *SetXHRBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.setXHRBreakpoint", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "DOMDebugger.setXHRBreakpoint", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "DOMDebugger", Op: "SetXHRBreakpoint", Err: err}
	}
	return
}
