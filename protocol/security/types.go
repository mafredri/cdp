// Code generated by cdpgen. DO NOT EDIT.

package security

// CertificateID An internal certificate ID value.
type CertificateID int

// MixedContentType A description of mixed content (HTTP resources on HTTPS pages), as defined by https://www.w3.org/TR/mixed-content/#categories
type MixedContentType string

// MixedContentType as enums.
const (
	MixedContentTypeNotSet              MixedContentType = ""
	MixedContentTypeBlockable           MixedContentType = "blockable"
	MixedContentTypeOptionallyBlockable MixedContentType = "optionally-blockable"
	MixedContentTypeNone                MixedContentType = "none"
)

func (e MixedContentType) Valid() bool {
	switch e {
	case "blockable", "optionally-blockable", "none":
		return true
	default:
		return false
	}
}

func (e MixedContentType) String() string {
	return string(e)
}

// State The security level of a page or resource.
type State string

// State as enums.
const (
	StateNotSet   State = ""
	StateUnknown  State = "unknown"
	StateNeutral  State = "neutral"
	StateInsecure State = "insecure"
	StateSecure   State = "secure"
	StateInfo     State = "info"
)

func (e State) Valid() bool {
	switch e {
	case "unknown", "neutral", "insecure", "secure", "info":
		return true
	default:
		return false
	}
}

func (e State) String() string {
	return string(e)
}

// StateExplanation An explanation of an factor contributing to the security state.
type StateExplanation struct {
	SecurityState    State            `json:"securityState"`    // Security state representing the severity of the factor being explained.
	Summary          string           `json:"summary"`          // Short phrase describing the type of factor.
	Description      string           `json:"description"`      // Full text explanation of the factor.
	MixedContentType MixedContentType `json:"mixedContentType"` // The type of mixed content described by the explanation.
	Certificate      []string         `json:"certificate"`      // Page certificate.
}

// InsecureContentStatus Information about insecure content on the page.
type InsecureContentStatus struct {
	RanMixedContent                bool  `json:"ranMixedContent"`                // True if the page was loaded over HTTPS and ran mixed (HTTP) content such as scripts.
	DisplayedMixedContent          bool  `json:"displayedMixedContent"`          // True if the page was loaded over HTTPS and displayed mixed (HTTP) content such as images.
	ContainedMixedForm             bool  `json:"containedMixedForm"`             // True if the page was loaded over HTTPS and contained a form targeting an insecure url.
	RanContentWithCertErrors       bool  `json:"ranContentWithCertErrors"`       // True if the page was loaded over HTTPS without certificate errors, and ran content such as scripts that were loaded with certificate errors.
	DisplayedContentWithCertErrors bool  `json:"displayedContentWithCertErrors"` // True if the page was loaded over HTTPS without certificate errors, and displayed content such as images that were loaded with certificate errors.
	RanInsecureContentStyle        State `json:"ranInsecureContentStyle"`        // Security state representing a page that ran insecure content.
	DisplayedInsecureContentStyle  State `json:"displayedInsecureContentStyle"`  // Security state representing a page that displayed insecure content.
}

// CertificateErrorAction The action to take when a certificate error occurs. continue will continue processing the request and cancel will cancel the request.
type CertificateErrorAction string

// CertificateErrorAction as enums.
const (
	CertificateErrorActionNotSet   CertificateErrorAction = ""
	CertificateErrorActionContinue CertificateErrorAction = "continue"
	CertificateErrorActionCancel   CertificateErrorAction = "cancel"
)

func (e CertificateErrorAction) Valid() bool {
	switch e {
	case "continue", "cancel":
		return true
	default:
		return false
	}
}

func (e CertificateErrorAction) String() string {
	return string(e)
}
