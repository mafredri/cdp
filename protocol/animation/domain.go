// Code generated by cdpgen. DO NOT EDIT.

// Package animation implements the Animation domain.
package animation

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Animation domain.
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the Animation domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the Animation domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// Disable invokes the Animation method. Disables animation domain
// notifications.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "Animation.disable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "Disable", Err: err}
	}
	return
}

// Enable invokes the Animation method. Enables animation domain
// notifications.
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "Animation.enable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "Enable", Err: err}
	}
	return
}

// GetCurrentTime invokes the Animation method. Returns the current time of
// the an animation.
func (d *domainClient) GetCurrentTime(ctx context.Context, args *GetCurrentTimeArgs) (reply *GetCurrentTimeReply, err error) {
	reply = new(GetCurrentTimeReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Animation.getCurrentTime", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Animation.getCurrentTime", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "GetCurrentTime", Err: err}
	}
	return
}

// GetPlaybackRate invokes the Animation method. Gets the playback rate of the
// document timeline.
func (d *domainClient) GetPlaybackRate(ctx context.Context) (reply *GetPlaybackRateReply, err error) {
	reply = new(GetPlaybackRateReply)
	err = rpcc.InvokeRPC(ctx, "Animation.getPlaybackRate", d.sessionID, nil, reply, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "GetPlaybackRate", Err: err}
	}
	return
}

// ReleaseAnimations invokes the Animation method. Releases a set of
// animations to no longer be manipulated.
func (d *domainClient) ReleaseAnimations(ctx context.Context, args *ReleaseAnimationsArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Animation.releaseAnimations", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Animation.releaseAnimations", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "ReleaseAnimations", Err: err}
	}
	return
}

// ResolveAnimation invokes the Animation method. Gets the remote object of
// the Animation.
func (d *domainClient) ResolveAnimation(ctx context.Context, args *ResolveAnimationArgs) (reply *ResolveAnimationReply, err error) {
	reply = new(ResolveAnimationReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Animation.resolveAnimation", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Animation.resolveAnimation", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "ResolveAnimation", Err: err}
	}
	return
}

// SeekAnimations invokes the Animation method. Seek a set of animations to a
// particular time within each animation.
func (d *domainClient) SeekAnimations(ctx context.Context, args *SeekAnimationsArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Animation.seekAnimations", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Animation.seekAnimations", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "SeekAnimations", Err: err}
	}
	return
}

// SetPaused invokes the Animation method. Sets the paused state of a set of
// animations.
func (d *domainClient) SetPaused(ctx context.Context, args *SetPausedArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Animation.setPaused", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Animation.setPaused", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "SetPaused", Err: err}
	}
	return
}

// SetPlaybackRate invokes the Animation method. Sets the playback rate of the
// document timeline.
func (d *domainClient) SetPlaybackRate(ctx context.Context, args *SetPlaybackRateArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Animation.setPlaybackRate", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Animation.setPlaybackRate", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "SetPlaybackRate", Err: err}
	}
	return
}

// SetTiming invokes the Animation method. Sets the timing of an animation
// node.
func (d *domainClient) SetTiming(ctx context.Context, args *SetTimingArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Animation.setTiming", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Animation.setTiming", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Animation", Op: "SetTiming", Err: err}
	}
	return
}

func (d *domainClient) AnimationCanceled(ctx context.Context) (CanceledClient, error) {
	s, err := rpcc.NewStream(ctx, "Animation.animationCanceled", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &canceledClient{Stream: s}, nil
}

type canceledClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *canceledClient) GetStream() rpcc.Stream { return c.Stream }

func (c *canceledClient) Recv() (*CanceledReply, error) {
	event := new(CanceledReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Animation", Op: "AnimationCanceled Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) AnimationCreated(ctx context.Context) (CreatedClient, error) {
	s, err := rpcc.NewStream(ctx, "Animation.animationCreated", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &createdClient{Stream: s}, nil
}

type createdClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *createdClient) GetStream() rpcc.Stream { return c.Stream }

func (c *createdClient) Recv() (*CreatedReply, error) {
	event := new(CreatedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Animation", Op: "AnimationCreated Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) AnimationStarted(ctx context.Context) (StartedClient, error) {
	s, err := rpcc.NewStream(ctx, "Animation.animationStarted", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &startedClient{Stream: s}, nil
}

type startedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *startedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *startedClient) Recv() (*StartedReply, error) {
	event := new(StartedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Animation", Op: "AnimationStarted Recv", Err: err}
	}
	return event, nil
}
