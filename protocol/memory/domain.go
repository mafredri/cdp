// Code generated by cdpgen. DO NOT EDIT.

// Package memory implements the Memory domain.
package memory

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Memory domain.
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the Memory domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the Memory domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// GetDOMCounters invokes the Memory method.
func (d *domainClient) GetDOMCounters(ctx context.Context) (reply *GetDOMCountersReply, err error) {
	reply = new(GetDOMCountersReply)
	err = rpcc.InvokeRPC(ctx, "Memory.getDOMCounters", d.sessionID, nil, reply, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "GetDOMCounters", Err: err}
	}
	return
}

// PrepareForLeakDetection invokes the Memory method.
func (d *domainClient) PrepareForLeakDetection(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "Memory.prepareForLeakDetection", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "PrepareForLeakDetection", Err: err}
	}
	return
}

// ForciblyPurgeJavaScriptMemory invokes the Memory method. Simulate
// OomIntervention by purging V8 memory.
func (d *domainClient) ForciblyPurgeJavaScriptMemory(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "Memory.forciblyPurgeJavaScriptMemory", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "ForciblyPurgeJavaScriptMemory", Err: err}
	}
	return
}

// SetPressureNotificationsSuppressed invokes the Memory method.
// Enable/disable suppressing memory pressure notifications in all processes.
func (d *domainClient) SetPressureNotificationsSuppressed(ctx context.Context, args *SetPressureNotificationsSuppressedArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Memory.setPressureNotificationsSuppressed", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Memory.setPressureNotificationsSuppressed", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "SetPressureNotificationsSuppressed", Err: err}
	}
	return
}

// SimulatePressureNotification invokes the Memory method. Simulate a memory
// pressure notification in all processes.
func (d *domainClient) SimulatePressureNotification(ctx context.Context, args *SimulatePressureNotificationArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Memory.simulatePressureNotification", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Memory.simulatePressureNotification", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "SimulatePressureNotification", Err: err}
	}
	return
}

// StartSampling invokes the Memory method. Start collecting native memory
// profile.
func (d *domainClient) StartSampling(ctx context.Context, args *StartSamplingArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Memory.startSampling", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Memory.startSampling", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "StartSampling", Err: err}
	}
	return
}

// StopSampling invokes the Memory method. Stop collecting native memory
// profile.
func (d *domainClient) StopSampling(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "Memory.stopSampling", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "StopSampling", Err: err}
	}
	return
}

// GetAllTimeSamplingProfile invokes the Memory method. Retrieve native memory
// allocations profile collected since renderer process startup.
func (d *domainClient) GetAllTimeSamplingProfile(ctx context.Context) (reply *GetAllTimeSamplingProfileReply, err error) {
	reply = new(GetAllTimeSamplingProfileReply)
	err = rpcc.InvokeRPC(ctx, "Memory.getAllTimeSamplingProfile", d.sessionID, nil, reply, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "GetAllTimeSamplingProfile", Err: err}
	}
	return
}

// GetBrowserSamplingProfile invokes the Memory method. Retrieve native memory
// allocations profile collected since browser process startup.
func (d *domainClient) GetBrowserSamplingProfile(ctx context.Context) (reply *GetBrowserSamplingProfileReply, err error) {
	reply = new(GetBrowserSamplingProfileReply)
	err = rpcc.InvokeRPC(ctx, "Memory.getBrowserSamplingProfile", d.sessionID, nil, reply, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "GetBrowserSamplingProfile", Err: err}
	}
	return
}

// GetSamplingProfile invokes the Memory method. Retrieve native memory
// allocations profile collected since last `startSampling` call.
func (d *domainClient) GetSamplingProfile(ctx context.Context) (reply *GetSamplingProfileReply, err error) {
	reply = new(GetSamplingProfileReply)
	err = rpcc.InvokeRPC(ctx, "Memory.getSamplingProfile", d.sessionID, nil, reply, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Memory", Op: "GetSamplingProfile", Err: err}
	}
	return
}
