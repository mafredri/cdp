// Code generated by cdpgen. DO NOT EDIT.

// Package io implements the IO domain. Input/Output operations for streams
// produced by DevTools.
package io

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the IO domain. Input/Output operations for
// streams produced by DevTools.
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the IO domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the IO domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// Close invokes the IO method. Close the stream, discard any temporary
// backing storage.
func (d *domainClient) Close(ctx context.Context, args *CloseArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IO.close", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IO.close", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IO", Op: "Close", Err: err}
	}
	return
}

// Read invokes the IO method. Read a chunk of the stream
func (d *domainClient) Read(ctx context.Context, args *ReadArgs) (reply *ReadReply, err error) {
	reply = new(ReadReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IO.read", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IO.read", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IO", Op: "Read", Err: err}
	}
	return
}

// ResolveBlob invokes the IO method. Return UUID of Blob object specified by
// a remote object id.
func (d *domainClient) ResolveBlob(ctx context.Context, args *ResolveBlobArgs) (reply *ResolveBlobReply, err error) {
	reply = new(ResolveBlobReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "IO.resolveBlob", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "IO.resolveBlob", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "IO", Op: "ResolveBlob", Err: err}
	}
	return
}
