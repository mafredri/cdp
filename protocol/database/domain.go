// Code generated by cdpgen. DO NOT EDIT.

// Package database implements the Database domain.
package database

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Database domain.
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the Database domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the Database domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// Disable invokes the Database method. Disables database tracking, prevents
// database events from being sent to the client.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "Database.disable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Database", Op: "Disable", Err: err}
	}
	return
}

// Enable invokes the Database method. Enables database tracking, database
// events will now be delivered to the client.
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "Database.enable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Database", Op: "Enable", Err: err}
	}
	return
}

// ExecuteSQL invokes the Database method.
func (d *domainClient) ExecuteSQL(ctx context.Context, args *ExecuteSQLArgs) (reply *ExecuteSQLReply, err error) {
	reply = new(ExecuteSQLReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Database.executeSQL", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Database.executeSQL", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Database", Op: "ExecuteSQL", Err: err}
	}
	return
}

// GetDatabaseTableNames invokes the Database method.
func (d *domainClient) GetDatabaseTableNames(ctx context.Context, args *GetDatabaseTableNamesArgs) (reply *GetDatabaseTableNamesReply, err error) {
	reply = new(GetDatabaseTableNamesReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "Database.getDatabaseTableNames", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "Database.getDatabaseTableNames", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Database", Op: "GetDatabaseTableNames", Err: err}
	}
	return
}

func (d *domainClient) AddDatabase(ctx context.Context) (AddDatabaseClient, error) {
	s, err := rpcc.NewStream(ctx, "Database.addDatabase", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &addDatabaseClient{Stream: s}, nil
}

type addDatabaseClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *addDatabaseClient) GetStream() rpcc.Stream { return c.Stream }

func (c *addDatabaseClient) Recv() (*AddDatabaseReply, error) {
	event := new(AddDatabaseReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Database", Op: "AddDatabase Recv", Err: err}
	}
	return event, nil
}
