// Code generated by cdpgen. DO NOT EDIT.

// Package layertree implements the LayerTree domain.
package layertree

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the LayerTree domain.
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the LayerTree domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the LayerTree domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// CompositingReasons invokes the LayerTree method. Provides the reasons why
// the given layer was composited.
func (d *domainClient) CompositingReasons(ctx context.Context, args *CompositingReasonsArgs) (reply *CompositingReasonsReply, err error) {
	reply = new(CompositingReasonsReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "LayerTree.compositingReasons", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "LayerTree.compositingReasons", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "LayerTree", Op: "CompositingReasons", Err: err}
	}
	return
}

// Disable invokes the LayerTree method. Disables compositing tree inspection.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "LayerTree.disable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "LayerTree", Op: "Disable", Err: err}
	}
	return
}

// Enable invokes the LayerTree method. Enables compositing tree inspection.
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "LayerTree.enable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "LayerTree", Op: "Enable", Err: err}
	}
	return
}

// LoadSnapshot invokes the LayerTree method. Returns the snapshot identifier.
func (d *domainClient) LoadSnapshot(ctx context.Context, args *LoadSnapshotArgs) (reply *LoadSnapshotReply, err error) {
	reply = new(LoadSnapshotReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "LayerTree.loadSnapshot", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "LayerTree.loadSnapshot", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "LayerTree", Op: "LoadSnapshot", Err: err}
	}
	return
}

// MakeSnapshot invokes the LayerTree method. Returns the layer snapshot
// identifier.
func (d *domainClient) MakeSnapshot(ctx context.Context, args *MakeSnapshotArgs) (reply *MakeSnapshotReply, err error) {
	reply = new(MakeSnapshotReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "LayerTree.makeSnapshot", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "LayerTree.makeSnapshot", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "LayerTree", Op: "MakeSnapshot", Err: err}
	}
	return
}

// ProfileSnapshot invokes the LayerTree method.
func (d *domainClient) ProfileSnapshot(ctx context.Context, args *ProfileSnapshotArgs) (reply *ProfileSnapshotReply, err error) {
	reply = new(ProfileSnapshotReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "LayerTree.profileSnapshot", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "LayerTree.profileSnapshot", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "LayerTree", Op: "ProfileSnapshot", Err: err}
	}
	return
}

// ReleaseSnapshot invokes the LayerTree method. Releases layer snapshot
// captured by the back-end.
func (d *domainClient) ReleaseSnapshot(ctx context.Context, args *ReleaseSnapshotArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "LayerTree.releaseSnapshot", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "LayerTree.releaseSnapshot", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "LayerTree", Op: "ReleaseSnapshot", Err: err}
	}
	return
}

// ReplaySnapshot invokes the LayerTree method. Replays the layer snapshot and
// returns the resulting bitmap.
func (d *domainClient) ReplaySnapshot(ctx context.Context, args *ReplaySnapshotArgs) (reply *ReplaySnapshotReply, err error) {
	reply = new(ReplaySnapshotReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "LayerTree.replaySnapshot", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "LayerTree.replaySnapshot", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "LayerTree", Op: "ReplaySnapshot", Err: err}
	}
	return
}

// SnapshotCommandLog invokes the LayerTree method. Replays the layer snapshot
// and returns canvas log.
func (d *domainClient) SnapshotCommandLog(ctx context.Context, args *SnapshotCommandLogArgs) (reply *SnapshotCommandLogReply, err error) {
	reply = new(SnapshotCommandLogReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "LayerTree.snapshotCommandLog", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "LayerTree.snapshotCommandLog", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "LayerTree", Op: "SnapshotCommandLog", Err: err}
	}
	return
}

func (d *domainClient) LayerPainted(ctx context.Context) (LayerPaintedClient, error) {
	s, err := rpcc.NewStream(ctx, "LayerTree.layerPainted", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &layerPaintedClient{Stream: s}, nil
}

type layerPaintedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *layerPaintedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *layerPaintedClient) Recv() (*LayerPaintedReply, error) {
	event := new(LayerPaintedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "LayerTree", Op: "LayerPainted Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) LayerTreeDidChange(ctx context.Context) (DidChangeClient, error) {
	s, err := rpcc.NewStream(ctx, "LayerTree.layerTreeDidChange", d.sessionID, d.conn)
	if err != nil {
		return nil, err
	}
	return &didChangeClient{Stream: s}, nil
}

type didChangeClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *didChangeClient) GetStream() rpcc.Stream { return c.Stream }

func (c *didChangeClient) Recv() (*DidChangeReply, error) {
	event := new(DidChangeReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "LayerTree", Op: "LayerTreeDidChange Recv", Err: err}
	}
	return event, nil
}
