// Code generated by cdpgen. DO NOT EDIT.

// Package media implements the Media domain. This domain allows detailed
// inspection of media elements
package media

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Media domain. This domain allows detailed
// inspection of media elements
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the Media domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// Enable invokes the Media method. Enables the Media domain
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "Media.enable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Media", Op: "Enable", Err: err}
	}
	return
}

// Disable invokes the Media method. Disables the Media domain.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "Media.disable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Media", Op: "Disable", Err: err}
	}
	return
}

func (d *domainClient) PlayerPropertiesChanged(ctx context.Context) (PlayerPropertiesChangedClient, error) {
	s, err := rpcc.NewStream(ctx, "Media.playerPropertiesChanged", d.conn)
	if err != nil {
		return nil, err
	}
	return &playerPropertiesChangedClient{Stream: s}, nil
}

type playerPropertiesChangedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *playerPropertiesChangedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *playerPropertiesChangedClient) Recv() (*PlayerPropertiesChangedReply, error) {
	event := new(PlayerPropertiesChangedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Media", Op: "PlayerPropertiesChanged Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) PlayerEventsAdded(ctx context.Context) (PlayerEventsAddedClient, error) {
	s, err := rpcc.NewStream(ctx, "Media.playerEventsAdded", d.conn)
	if err != nil {
		return nil, err
	}
	return &playerEventsAddedClient{Stream: s}, nil
}

type playerEventsAddedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *playerEventsAddedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *playerEventsAddedClient) Recv() (*PlayerEventsAddedReply, error) {
	event := new(PlayerEventsAddedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Media", Op: "PlayerEventsAdded Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) PlayerMessagesLogged(ctx context.Context) (PlayerMessagesLoggedClient, error) {
	s, err := rpcc.NewStream(ctx, "Media.playerMessagesLogged", d.conn)
	if err != nil {
		return nil, err
	}
	return &playerMessagesLoggedClient{Stream: s}, nil
}

type playerMessagesLoggedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *playerMessagesLoggedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *playerMessagesLoggedClient) Recv() (*PlayerMessagesLoggedReply, error) {
	event := new(PlayerMessagesLoggedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Media", Op: "PlayerMessagesLogged Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) PlayerErrorsRaised(ctx context.Context) (PlayerErrorsRaisedClient, error) {
	s, err := rpcc.NewStream(ctx, "Media.playerErrorsRaised", d.conn)
	if err != nil {
		return nil, err
	}
	return &playerErrorsRaisedClient{Stream: s}, nil
}

type playerErrorsRaisedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *playerErrorsRaisedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *playerErrorsRaisedClient) Recv() (*PlayerErrorsRaisedReply, error) {
	event := new(PlayerErrorsRaisedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Media", Op: "PlayerErrorsRaised Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) PlayersCreated(ctx context.Context) (PlayersCreatedClient, error) {
	s, err := rpcc.NewStream(ctx, "Media.playersCreated", d.conn)
	if err != nil {
		return nil, err
	}
	return &playersCreatedClient{Stream: s}, nil
}

type playersCreatedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *playersCreatedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *playersCreatedClient) Recv() (*PlayersCreatedReply, error) {
	event := new(PlayersCreatedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Media", Op: "PlayersCreated Recv", Err: err}
	}
	return event, nil
}
