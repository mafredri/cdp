// Code generated by cdpgen. DO NOT EDIT.

package media

import (
	"encoding/json"
	"errors"
	"time"
)

// PlayerID Players will get an ID that is unique within the agent context.
type PlayerID string

// Timestamp
type Timestamp float64

// String calls (time.Time).String().
func (t Timestamp) String() string {
	return t.Time().String()
}

// Time parses the Unix time.
func (t Timestamp) Time() time.Time {
	ts := float64(t) / 1
	secs := int64(ts)
	nsecs := int64((ts - float64(secs)) * 1000000000)
	return time.Unix(secs, nsecs)
}

// MarshalJSON implements json.Marshaler. Encodes to null if t is zero.
func (t Timestamp) MarshalJSON() ([]byte, error) {
	if t == 0 {
		return []byte("null"), nil
	}
	f := float64(t)
	return json.Marshal(&f)
}

// UnmarshalJSON implements json.Unmarshaler.
func (t *Timestamp) UnmarshalJSON(data []byte) error {
	*t = 0
	if len(data) == 0 {
		return nil
	}
	var f float64
	if err := json.Unmarshal(data, &f); err != nil {
		return errors.New("media.Timestamp: " + err.Error())
	}
	*t = Timestamp(f)
	return nil
}

var _ json.Marshaler = (*Timestamp)(nil)
var _ json.Unmarshaler = (*Timestamp)(nil)

// PlayerMessage Have one type per entry in MediaLogRecord::Type Corresponds
// to kMessage
type PlayerMessage struct {
	// Level Keep in sync with MediaLogMessageLevel We are currently
	// keeping the message level 'error' separate from the PlayerError type
	// because right now they represent different things, this one being a
	// DVLOG(ERROR) style log message that gets printed based on what log
	// level is selected in the UI, and the other is a representation of a
	// media::PipelineStatus object. Soon however we're going to be moving
	// away from using PipelineStatus for errors and introducing a new
	// error type which should hopefully let us integrate the error log
	// level into the PlayerError type.
	//
	// Values: "error", "warning", "info", "debug".
	Level   string `json:"level"`
	Message string `json:"message"` // No description.
}

// PlayerProperty Corresponds to kMediaPropertyChange
type PlayerProperty struct {
	Name  string `json:"name"`  // No description.
	Value string `json:"value"` // No description.
}

// PlayerEvent Corresponds to kMediaEventTriggered
type PlayerEvent struct {
	Timestamp Timestamp `json:"timestamp"` // No description.
	Value     string    `json:"value"`     // No description.
}

// PlayerError Corresponds to kMediaError
type PlayerError struct {
	// Type
	//
	// Values: "pipeline_error", "media_error".
	Type      string `json:"type"`
	ErrorCode string `json:"errorCode"` // When this switches to using media::Status instead of PipelineStatus we can remove "errorCode" and replace it with the fields from a Status instance. This also seems like a duplicate of the error level enum - there is a todo bug to have that level removed and use this instead. (crbug.com/1068454)
}
