// Code generated by cdpgen. DO NOT EDIT.

// Package eventbreakpoints implements the EventBreakpoints domain.
// EventBreakpoints permits setting breakpoints on particular operations and
// events in targets that run JavaScript but do not have a DOM. JavaScript
// execution will stop on these operations as if there was a regular breakpoint
// set.
package eventbreakpoints

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the EventBreakpoints domain. EventBreakpoints
// permits setting breakpoints on particular operations and events in targets
// that run JavaScript but do not have a DOM. JavaScript execution will stop on
// these operations as if there was a regular breakpoint set.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the EventBreakpoints domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// SetInstrumentationBreakpoint invokes the EventBreakpoints method. Sets
// breakpoint on particular native event.
func (d *domainClient) SetInstrumentationBreakpoint(ctx context.Context, args *SetInstrumentationBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "EventBreakpoints.setInstrumentationBreakpoint", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "EventBreakpoints.setInstrumentationBreakpoint", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "EventBreakpoints", Op: "SetInstrumentationBreakpoint", Err: err}
	}
	return
}

// RemoveInstrumentationBreakpoint invokes the EventBreakpoints method.
// Removes breakpoint on particular native event.
func (d *domainClient) RemoveInstrumentationBreakpoint(ctx context.Context, args *RemoveInstrumentationBreakpointArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "EventBreakpoints.removeInstrumentationBreakpoint", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "EventBreakpoints.removeInstrumentationBreakpoint", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "EventBreakpoints", Op: "RemoveInstrumentationBreakpoint", Err: err}
	}
	return
}
