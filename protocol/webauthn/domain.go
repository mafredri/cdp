// Code generated by cdpgen. DO NOT EDIT.

// Package webauthn implements the WebAuthn domain. This domain allows
// configuring virtual authenticators to test the WebAuthn API.
package webauthn

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the WebAuthn domain. This domain allows
// configuring virtual authenticators to test the WebAuthn API.
type domainClient struct {
	conn      *rpcc.Conn
	sessionID string
}

// NewClient returns a client for the WebAuthn domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// NewClient returns a client for the WebAuthn domain with the connection set to conn.
func NewSessionClient(conn *rpcc.Conn, sessionID string) *domainClient {
	return &domainClient{conn: conn, sessionID: sessionID}
}

// Enable invokes the WebAuthn method. Enable the WebAuthn domain and start
// intercepting credential storage and retrieval with a virtual authenticator.
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "WebAuthn.enable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "WebAuthn", Op: "Enable", Err: err}
	}
	return
}

// Disable invokes the WebAuthn method. Disable the WebAuthn domain.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.InvokeRPC(ctx, "WebAuthn.disable", d.sessionID, nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "WebAuthn", Op: "Disable", Err: err}
	}
	return
}

// AddVirtualAuthenticator invokes the WebAuthn method. Creates and adds a
// virtual authenticator.
func (d *domainClient) AddVirtualAuthenticator(ctx context.Context, args *AddVirtualAuthenticatorArgs) (reply *AddVirtualAuthenticatorReply, err error) {
	reply = new(AddVirtualAuthenticatorReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.addVirtualAuthenticator", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.addVirtualAuthenticator", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "WebAuthn", Op: "AddVirtualAuthenticator", Err: err}
	}
	return
}

// RemoveVirtualAuthenticator invokes the WebAuthn method. Removes the given
// authenticator.
func (d *domainClient) RemoveVirtualAuthenticator(ctx context.Context, args *RemoveVirtualAuthenticatorArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.removeVirtualAuthenticator", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.removeVirtualAuthenticator", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "WebAuthn", Op: "RemoveVirtualAuthenticator", Err: err}
	}
	return
}

// AddCredential invokes the WebAuthn method. Adds the credential to the
// specified authenticator.
func (d *domainClient) AddCredential(ctx context.Context, args *AddCredentialArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.addCredential", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.addCredential", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "WebAuthn", Op: "AddCredential", Err: err}
	}
	return
}

// GetCredentials invokes the WebAuthn method. Returns all the credentials
// stored in the given virtual authenticator.
func (d *domainClient) GetCredentials(ctx context.Context, args *GetCredentialsArgs) (reply *GetCredentialsReply, err error) {
	reply = new(GetCredentialsReply)
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.getCredentials", d.sessionID, args, reply, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.getCredentials", d.sessionID, nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "WebAuthn", Op: "GetCredentials", Err: err}
	}
	return
}

// ClearCredentials invokes the WebAuthn method. Clears all the credentials
// from the specified device.
func (d *domainClient) ClearCredentials(ctx context.Context, args *ClearCredentialsArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.clearCredentials", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.clearCredentials", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "WebAuthn", Op: "ClearCredentials", Err: err}
	}
	return
}

// SetUserVerified invokes the WebAuthn method. Sets whether User Verification
// succeeds or fails for an authenticator. The default is true.
func (d *domainClient) SetUserVerified(ctx context.Context, args *SetUserVerifiedArgs) (err error) {
	if args != nil {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.setUserVerified", d.sessionID, args, nil, d.conn)
	} else {
		err = rpcc.InvokeRPC(ctx, "WebAuthn.setUserVerified", d.sessionID, nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "WebAuthn", Op: "SetUserVerified", Err: err}
	}
	return
}
