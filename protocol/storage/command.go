// Code generated by cdpgen. DO NOT EDIT.

package storage

import (
	"github.com/mafredri/cdp/protocol/browser"
	"github.com/mafredri/cdp/protocol/network"
)

// ClearDataForOriginArgs represents the arguments for ClearDataForOrigin in the Storage domain.
type ClearDataForOriginArgs struct {
	Origin       string `json:"origin"`       // Security origin.
	StorageTypes string `json:"storageTypes"` // Comma separated list of StorageType to clear.
}

// NewClearDataForOriginArgs initializes ClearDataForOriginArgs with the required arguments.
func NewClearDataForOriginArgs(origin string, storageTypes string) *ClearDataForOriginArgs {
	args := new(ClearDataForOriginArgs)
	args.Origin = origin
	args.StorageTypes = storageTypes
	return args
}

// GetCookiesArgs represents the arguments for GetCookies in the Storage domain.
type GetCookiesArgs struct {
	BrowserContextID *browser.ContextID `json:"browserContextId,omitempty"` // Browser context to use when called on the browser endpoint.
}

// NewGetCookiesArgs initializes GetCookiesArgs with the required arguments.
func NewGetCookiesArgs() *GetCookiesArgs {
	args := new(GetCookiesArgs)

	return args
}

// SetBrowserContextID sets the BrowserContextID optional argument.
// Browser context to use when called on the browser endpoint.
func (a *GetCookiesArgs) SetBrowserContextID(browserContextID browser.ContextID) *GetCookiesArgs {
	a.BrowserContextID = &browserContextID
	return a
}

// GetCookiesReply represents the return values for GetCookies in the Storage domain.
type GetCookiesReply struct {
	Cookies []network.Cookie `json:"cookies"` // Array of cookie objects.
}

// SetCookiesArgs represents the arguments for SetCookies in the Storage domain.
type SetCookiesArgs struct {
	Cookies          []network.CookieParam `json:"cookies"`                    // Cookies to be set.
	BrowserContextID *browser.ContextID    `json:"browserContextId,omitempty"` // Browser context to use when called on the browser endpoint.
}

// NewSetCookiesArgs initializes SetCookiesArgs with the required arguments.
func NewSetCookiesArgs(cookies []network.CookieParam) *SetCookiesArgs {
	args := new(SetCookiesArgs)
	args.Cookies = cookies
	return args
}

// SetBrowserContextID sets the BrowserContextID optional argument.
// Browser context to use when called on the browser endpoint.
func (a *SetCookiesArgs) SetBrowserContextID(browserContextID browser.ContextID) *SetCookiesArgs {
	a.BrowserContextID = &browserContextID
	return a
}

// ClearCookiesArgs represents the arguments for ClearCookies in the Storage domain.
type ClearCookiesArgs struct {
	BrowserContextID *browser.ContextID `json:"browserContextId,omitempty"` // Browser context to use when called on the browser endpoint.
}

// NewClearCookiesArgs initializes ClearCookiesArgs with the required arguments.
func NewClearCookiesArgs() *ClearCookiesArgs {
	args := new(ClearCookiesArgs)

	return args
}

// SetBrowserContextID sets the BrowserContextID optional argument.
// Browser context to use when called on the browser endpoint.
func (a *ClearCookiesArgs) SetBrowserContextID(browserContextID browser.ContextID) *ClearCookiesArgs {
	a.BrowserContextID = &browserContextID
	return a
}

// GetUsageAndQuotaArgs represents the arguments for GetUsageAndQuota in the Storage domain.
type GetUsageAndQuotaArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// NewGetUsageAndQuotaArgs initializes GetUsageAndQuotaArgs with the required arguments.
func NewGetUsageAndQuotaArgs(origin string) *GetUsageAndQuotaArgs {
	args := new(GetUsageAndQuotaArgs)
	args.Origin = origin
	return args
}

// GetUsageAndQuotaReply represents the return values for GetUsageAndQuota in the Storage domain.
type GetUsageAndQuotaReply struct {
	Usage          float64        `json:"usage"`          // Storage usage (bytes).
	Quota          float64        `json:"quota"`          // Storage quota (bytes).
	UsageBreakdown []UsageForType `json:"usageBreakdown"` // Storage usage per type (bytes).
}

// TrackCacheStorageForOriginArgs represents the arguments for TrackCacheStorageForOrigin in the Storage domain.
type TrackCacheStorageForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// NewTrackCacheStorageForOriginArgs initializes TrackCacheStorageForOriginArgs with the required arguments.
func NewTrackCacheStorageForOriginArgs(origin string) *TrackCacheStorageForOriginArgs {
	args := new(TrackCacheStorageForOriginArgs)
	args.Origin = origin
	return args
}

// TrackIndexedDBForOriginArgs represents the arguments for TrackIndexedDBForOrigin in the Storage domain.
type TrackIndexedDBForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// NewTrackIndexedDBForOriginArgs initializes TrackIndexedDBForOriginArgs with the required arguments.
func NewTrackIndexedDBForOriginArgs(origin string) *TrackIndexedDBForOriginArgs {
	args := new(TrackIndexedDBForOriginArgs)
	args.Origin = origin
	return args
}

// UntrackCacheStorageForOriginArgs represents the arguments for UntrackCacheStorageForOrigin in the Storage domain.
type UntrackCacheStorageForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// NewUntrackCacheStorageForOriginArgs initializes UntrackCacheStorageForOriginArgs with the required arguments.
func NewUntrackCacheStorageForOriginArgs(origin string) *UntrackCacheStorageForOriginArgs {
	args := new(UntrackCacheStorageForOriginArgs)
	args.Origin = origin
	return args
}

// UntrackIndexedDBForOriginArgs represents the arguments for UntrackIndexedDBForOrigin in the Storage domain.
type UntrackIndexedDBForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// NewUntrackIndexedDBForOriginArgs initializes UntrackIndexedDBForOriginArgs with the required arguments.
func NewUntrackIndexedDBForOriginArgs(origin string) *UntrackIndexedDBForOriginArgs {
	args := new(UntrackIndexedDBForOriginArgs)
	args.Origin = origin
	return args
}
