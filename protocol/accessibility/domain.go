// Code generated by cdpgen. DO NOT EDIT.

// Package accessibility implements the Accessibility domain.
package accessibility

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Accessibility domain.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the Accessibility domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// Disable invokes the Accessibility method. Disables the accessibility
// domain.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "Accessibility.disable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Accessibility", Op: "Disable", Err: err}
	}
	return
}

// Enable invokes the Accessibility method. Enables the accessibility domain
// which causes `AXNodeId`s to remain consistent between method calls. This
// turns on accessibility for the page, which can impact performance until
// accessibility is disabled.
func (d *domainClient) Enable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "Accessibility.enable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Accessibility", Op: "Enable", Err: err}
	}
	return
}

// GetPartialAXTree invokes the Accessibility method. Fetches the
// accessibility node and partial accessibility tree for this DOM node, if it
// exists.
func (d *domainClient) GetPartialAXTree(ctx context.Context, args *GetPartialAXTreeArgs) (reply *GetPartialAXTreeReply, err error) {
	reply = new(GetPartialAXTreeReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Accessibility.getPartialAXTree", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Accessibility.getPartialAXTree", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Accessibility", Op: "GetPartialAXTree", Err: err}
	}
	return
}

// GetFullAXTree invokes the Accessibility method. Fetches the entire
// accessibility tree for the root Document
func (d *domainClient) GetFullAXTree(ctx context.Context, args *GetFullAXTreeArgs) (reply *GetFullAXTreeReply, err error) {
	reply = new(GetFullAXTreeReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Accessibility.getFullAXTree", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Accessibility.getFullAXTree", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Accessibility", Op: "GetFullAXTree", Err: err}
	}
	return
}

// GetRootAXNode invokes the Accessibility method. Fetches the root node.
// Requires `enable()` to have been called previously.
func (d *domainClient) GetRootAXNode(ctx context.Context, args *GetRootAXNodeArgs) (reply *GetRootAXNodeReply, err error) {
	reply = new(GetRootAXNodeReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Accessibility.getRootAXNode", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Accessibility.getRootAXNode", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Accessibility", Op: "GetRootAXNode", Err: err}
	}
	return
}

// GetAXNodeAndAncestors invokes the Accessibility method. Fetches a node and
// all ancestors up to and including the root. Requires `enable()` to have been
// called previously.
func (d *domainClient) GetAXNodeAndAncestors(ctx context.Context, args *GetAXNodeAndAncestorsArgs) (reply *GetAXNodeAndAncestorsReply, err error) {
	reply = new(GetAXNodeAndAncestorsReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Accessibility.getAXNodeAndAncestors", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Accessibility.getAXNodeAndAncestors", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Accessibility", Op: "GetAXNodeAndAncestors", Err: err}
	}
	return
}

// GetChildAXNodes invokes the Accessibility method. Fetches a particular
// accessibility node by AXNodeId. Requires `enable()` to have been called
// previously.
func (d *domainClient) GetChildAXNodes(ctx context.Context, args *GetChildAXNodesArgs) (reply *GetChildAXNodesReply, err error) {
	reply = new(GetChildAXNodesReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Accessibility.getChildAXNodes", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Accessibility.getChildAXNodes", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Accessibility", Op: "GetChildAXNodes", Err: err}
	}
	return
}

// QueryAXTree invokes the Accessibility method. Query a DOM node's
// accessibility subtree for accessible name and role. This command computes
// the name and role for all nodes in the subtree, including those that are
// ignored for accessibility, and returns those that mactch the specified name
// and role. If no DOM node is specified, or the DOM node does not exist, the
// command returns an error. If neither `accessibleName` or `role` is
// specified, it returns all the accessibility nodes in the subtree.
func (d *domainClient) QueryAXTree(ctx context.Context, args *QueryAXTreeArgs) (reply *QueryAXTreeReply, err error) {
	reply = new(QueryAXTreeReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Accessibility.queryAXTree", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Accessibility.queryAXTree", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Accessibility", Op: "QueryAXTree", Err: err}
	}
	return
}

func (d *domainClient) LoadComplete(ctx context.Context) (LoadCompleteClient, error) {
	s, err := rpcc.NewStream(ctx, "Accessibility.loadComplete", d.conn)
	if err != nil {
		return nil, err
	}
	return &loadCompleteClient{Stream: s}, nil
}

type loadCompleteClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *loadCompleteClient) GetStream() rpcc.Stream { return c.Stream }

func (c *loadCompleteClient) Recv() (*LoadCompleteReply, error) {
	event := new(LoadCompleteReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Accessibility", Op: "LoadComplete Recv", Err: err}
	}
	return event, nil
}

func (d *domainClient) NodesUpdated(ctx context.Context) (NodesUpdatedClient, error) {
	s, err := rpcc.NewStream(ctx, "Accessibility.nodesUpdated", d.conn)
	if err != nil {
		return nil, err
	}
	return &nodesUpdatedClient{Stream: s}, nil
}

type nodesUpdatedClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *nodesUpdatedClient) GetStream() rpcc.Stream { return c.Stream }

func (c *nodesUpdatedClient) Recv() (*NodesUpdatedReply, error) {
	event := new(NodesUpdatedReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Accessibility", Op: "NodesUpdated Recv", Err: err}
	}
	return event, nil
}
