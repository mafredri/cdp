// Code generated by cdpgen. DO NOT EDIT.

package accessibility

import (
	"encoding/json"

	"github.com/mafredri/cdp/protocol/dom"
)

// AXNodeID Unique accessibility node identifier.
type AXNodeID string

// AXValueType Enum of possible property types.
type AXValueType string

// AXValueType as enums.
const (
	AXValueTypeNotSet             AXValueType = ""
	AXValueTypeBoolean            AXValueType = "boolean"
	AXValueTypeTristate           AXValueType = "tristate"
	AXValueTypeBooleanOrUndefined AXValueType = "booleanOrUndefined"
	AXValueTypeIDRef              AXValueType = "idref"
	AXValueTypeIdrefList          AXValueType = "idrefList"
	AXValueTypeInteger            AXValueType = "integer"
	AXValueTypeNode               AXValueType = "node"
	AXValueTypeNodeList           AXValueType = "nodeList"
	AXValueTypeNumber             AXValueType = "number"
	AXValueTypeString             AXValueType = "string"
	AXValueTypeComputedString     AXValueType = "computedString"
	AXValueTypeToken              AXValueType = "token"
	AXValueTypeTokenList          AXValueType = "tokenList"
	AXValueTypeDOMRelation        AXValueType = "domRelation"
	AXValueTypeRole               AXValueType = "role"
	AXValueTypeInternalRole       AXValueType = "internalRole"
	AXValueTypeValueUndefined     AXValueType = "valueUndefined"
)

func (e AXValueType) Valid() bool {
	switch e {
	case "boolean", "tristate", "booleanOrUndefined", "idref", "idrefList", "integer", "node", "nodeList", "number", "string", "computedString", "token", "tokenList", "domRelation", "role", "internalRole", "valueUndefined":
		return true
	default:
		return false
	}
}

func (e AXValueType) String() string {
	return string(e)
}

// AXValueSourceType Enum of possible property sources.
type AXValueSourceType string

// AXValueSourceType as enums.
const (
	AXValueSourceTypeNotSet         AXValueSourceType = ""
	AXValueSourceTypeAttribute      AXValueSourceType = "attribute"
	AXValueSourceTypeImplicit       AXValueSourceType = "implicit"
	AXValueSourceTypeStyle          AXValueSourceType = "style"
	AXValueSourceTypeContents       AXValueSourceType = "contents"
	AXValueSourceTypePlaceholder    AXValueSourceType = "placeholder"
	AXValueSourceTypeRelatedElement AXValueSourceType = "relatedElement"
)

func (e AXValueSourceType) Valid() bool {
	switch e {
	case "attribute", "implicit", "style", "contents", "placeholder", "relatedElement":
		return true
	default:
		return false
	}
}

func (e AXValueSourceType) String() string {
	return string(e)
}

// AXValueNativeSourceType Enum of possible native property sources (as a subtype of a particular AXValueSourceType).
type AXValueNativeSourceType string

// AXValueNativeSourceType as enums.
const (
	AXValueNativeSourceTypeNotSet       AXValueNativeSourceType = ""
	AXValueNativeSourceTypeFigcaption   AXValueNativeSourceType = "figcaption"
	AXValueNativeSourceTypeLabel        AXValueNativeSourceType = "label"
	AXValueNativeSourceTypeLabelfor     AXValueNativeSourceType = "labelfor"
	AXValueNativeSourceTypeLabelwrapped AXValueNativeSourceType = "labelwrapped"
	AXValueNativeSourceTypeLegend       AXValueNativeSourceType = "legend"
	AXValueNativeSourceTypeTablecaption AXValueNativeSourceType = "tablecaption"
	AXValueNativeSourceTypeTitle        AXValueNativeSourceType = "title"
	AXValueNativeSourceTypeOther        AXValueNativeSourceType = "other"
)

func (e AXValueNativeSourceType) Valid() bool {
	switch e {
	case "figcaption", "label", "labelfor", "labelwrapped", "legend", "tablecaption", "title", "other":
		return true
	default:
		return false
	}
}

func (e AXValueNativeSourceType) String() string {
	return string(e)
}

// AXValueSource A single source for a computed AX property.
type AXValueSource struct {
	Type              AXValueSourceType       `json:"type"`                        // What type of source this is.
	Value             *AXValue                `json:"value,omitempty"`             // The value of this property source.
	Attribute         *string                 `json:"attribute,omitempty"`         // The name of the relevant attribute, if any.
	AttributeValue    *AXValue                `json:"attributeValue,omitempty"`    // The value of the relevant attribute, if any.
	Superseded        *bool                   `json:"superseded,omitempty"`        // Whether this source is superseded by a higher priority source.
	NativeSource      AXValueNativeSourceType `json:"nativeSource,omitempty"`      // The native markup source for this value, e.g. a <label> element.
	NativeSourceValue *AXValue                `json:"nativeSourceValue,omitempty"` // The value, such as a node or node list, of the native source.
	Invalid           *bool                   `json:"invalid,omitempty"`           // Whether the value for this property is invalid.
	InvalidReason     *string                 `json:"invalidReason,omitempty"`     // Reason for the value being invalid, if it is.
}

// AXRelatedNode
type AXRelatedNode struct {
	BackendDOMNodeID dom.BackendNodeID `json:"backendDOMNodeId"` // The BackendNodeId of the related DOM node.
	IDRef            *string           `json:"idref,omitempty"`  // The IDRef value provided, if any.
	Text             *string           `json:"text,omitempty"`   // The text alternative of this node in the current context.
}

// AXProperty
type AXProperty struct {
	Name  string  `json:"name"`  // The name of this property.
	Value AXValue `json:"value"` // The value of this property.
}

// AXValue A single computed AX property.
type AXValue struct {
	Type         AXValueType     `json:"type"`                   // The type of this value.
	Value        json.RawMessage `json:"value,omitempty"`        // The computed value of this property.
	RelatedNodes []AXRelatedNode `json:"relatedNodes,omitempty"` // One or more related nodes, if applicable.
	Sources      []AXValueSource `json:"sources,omitempty"`      // The sources which contributed to the computation of this property.
}

// AXGlobalStates States which apply to every AX node.
type AXGlobalStates string

// AXGlobalStates as enums.
const (
	AXGlobalStatesNotSet          AXGlobalStates = ""
	AXGlobalStatesBusy            AXGlobalStates = "busy"
	AXGlobalStatesDisabled        AXGlobalStates = "disabled"
	AXGlobalStatesHidden          AXGlobalStates = "hidden"
	AXGlobalStatesHiddenRoot      AXGlobalStates = "hiddenRoot"
	AXGlobalStatesInvalid         AXGlobalStates = "invalid"
	AXGlobalStatesKeyshortcuts    AXGlobalStates = "keyshortcuts"
	AXGlobalStatesRoledescription AXGlobalStates = "roledescription"
)

func (e AXGlobalStates) Valid() bool {
	switch e {
	case "busy", "disabled", "hidden", "hiddenRoot", "invalid", "keyshortcuts", "roledescription":
		return true
	default:
		return false
	}
}

func (e AXGlobalStates) String() string {
	return string(e)
}

// AXLiveRegionAttributes Attributes which apply to nodes in live regions.
type AXLiveRegionAttributes string

// AXLiveRegionAttributes as enums.
const (
	AXLiveRegionAttributesNotSet   AXLiveRegionAttributes = ""
	AXLiveRegionAttributesLive     AXLiveRegionAttributes = "live"
	AXLiveRegionAttributesAtomic   AXLiveRegionAttributes = "atomic"
	AXLiveRegionAttributesRelevant AXLiveRegionAttributes = "relevant"
	AXLiveRegionAttributesRoot     AXLiveRegionAttributes = "root"
)

func (e AXLiveRegionAttributes) Valid() bool {
	switch e {
	case "live", "atomic", "relevant", "root":
		return true
	default:
		return false
	}
}

func (e AXLiveRegionAttributes) String() string {
	return string(e)
}

// AXWidgetAttributes Attributes which apply to widgets.
type AXWidgetAttributes string

// AXWidgetAttributes as enums.
const (
	AXWidgetAttributesNotSet          AXWidgetAttributes = ""
	AXWidgetAttributesAutocomplete    AXWidgetAttributes = "autocomplete"
	AXWidgetAttributesHaspopup        AXWidgetAttributes = "haspopup"
	AXWidgetAttributesLevel           AXWidgetAttributes = "level"
	AXWidgetAttributesMultiselectable AXWidgetAttributes = "multiselectable"
	AXWidgetAttributesOrientation     AXWidgetAttributes = "orientation"
	AXWidgetAttributesMultiline       AXWidgetAttributes = "multiline"
	AXWidgetAttributesReadonly        AXWidgetAttributes = "readonly"
	AXWidgetAttributesRequired        AXWidgetAttributes = "required"
	AXWidgetAttributesValuemin        AXWidgetAttributes = "valuemin"
	AXWidgetAttributesValuemax        AXWidgetAttributes = "valuemax"
	AXWidgetAttributesValuetext       AXWidgetAttributes = "valuetext"
)

func (e AXWidgetAttributes) Valid() bool {
	switch e {
	case "autocomplete", "haspopup", "level", "multiselectable", "orientation", "multiline", "readonly", "required", "valuemin", "valuemax", "valuetext":
		return true
	default:
		return false
	}
}

func (e AXWidgetAttributes) String() string {
	return string(e)
}

// AXWidgetStates States which apply to widgets.
type AXWidgetStates string

// AXWidgetStates as enums.
const (
	AXWidgetStatesNotSet   AXWidgetStates = ""
	AXWidgetStatesChecked  AXWidgetStates = "checked"
	AXWidgetStatesExpanded AXWidgetStates = "expanded"
	AXWidgetStatesModal    AXWidgetStates = "modal"
	AXWidgetStatesPressed  AXWidgetStates = "pressed"
	AXWidgetStatesSelected AXWidgetStates = "selected"
)

func (e AXWidgetStates) Valid() bool {
	switch e {
	case "checked", "expanded", "modal", "pressed", "selected":
		return true
	default:
		return false
	}
}

func (e AXWidgetStates) String() string {
	return string(e)
}

// AXRelationshipAttributes Relationships between elements other than parent/child/sibling.
type AXRelationshipAttributes string

// AXRelationshipAttributes as enums.
const (
	AXRelationshipAttributesNotSet           AXRelationshipAttributes = ""
	AXRelationshipAttributesActivedescendant AXRelationshipAttributes = "activedescendant"
	AXRelationshipAttributesControls         AXRelationshipAttributes = "controls"
	AXRelationshipAttributesDescribedby      AXRelationshipAttributes = "describedby"
	AXRelationshipAttributesDetails          AXRelationshipAttributes = "details"
	AXRelationshipAttributesErrormessage     AXRelationshipAttributes = "errormessage"
	AXRelationshipAttributesFlowto           AXRelationshipAttributes = "flowto"
	AXRelationshipAttributesLabelledby       AXRelationshipAttributes = "labelledby"
	AXRelationshipAttributesOwns             AXRelationshipAttributes = "owns"
)

func (e AXRelationshipAttributes) Valid() bool {
	switch e {
	case "activedescendant", "controls", "describedby", "details", "errormessage", "flowto", "labelledby", "owns":
		return true
	default:
		return false
	}
}

func (e AXRelationshipAttributes) String() string {
	return string(e)
}

// AXNode A node in the accessibility tree.
type AXNode struct {
	NodeID           AXNodeID           `json:"nodeId"`                     // Unique identifier for this node.
	Ignored          bool               `json:"ignored"`                    // Whether this node is ignored for accessibility
	IgnoredReasons   []AXProperty       `json:"ignoredReasons,omitempty"`   // Collection of reasons why this node is hidden.
	Role             *AXValue           `json:"role,omitempty"`             // This Node's role, whether explicit or implicit.
	Name             *AXValue           `json:"name,omitempty"`             // The accessible name for this Node.
	Description      *AXValue           `json:"description,omitempty"`      // The accessible description for this Node.
	Value            *AXValue           `json:"value,omitempty"`            // The value for this Node.
	Properties       []AXProperty       `json:"properties,omitempty"`       // All other properties
	ChildIDs         []AXNodeID         `json:"childIds,omitempty"`         // IDs for each of this node's child nodes.
	BackendDOMNodeID *dom.BackendNodeID `json:"backendDOMNodeId,omitempty"` // The backend ID for the associated DOM node, if any.
}
