// Code generated by cdpgen. DO NOT EDIT.

// Package performance implements the Performance domain.
package performance

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Performance domain.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the Performance domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// Disable invokes the Performance method. Disable collecting and reporting
// metrics.
func (d *domainClient) Disable(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "Performance.disable", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Performance", Op: "Disable", Err: err}
	}
	return
}

// Enable invokes the Performance method. Enable collecting and reporting
// metrics.
func (d *domainClient) Enable(ctx context.Context, args *EnableArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "Performance.enable", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Performance.enable", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Performance", Op: "Enable", Err: err}
	}
	return
}

// SetTimeDomain invokes the Performance method. Sets time domain to use for
// collecting and reporting duration metrics. Note that this must be called
// before enabling metrics collection. Calling this method while metrics
// collection is enabled returns an error.
func (d *domainClient) SetTimeDomain(ctx context.Context, args *SetTimeDomainArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "Performance.setTimeDomain", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Performance.setTimeDomain", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Performance", Op: "SetTimeDomain", Err: err}
	}
	return
}

// GetMetrics invokes the Performance method. Retrieve current values of
// run-time metrics.
func (d *domainClient) GetMetrics(ctx context.Context) (reply *GetMetricsReply, err error) {
	reply = new(GetMetricsReply)
	err = rpcc.Invoke(ctx, "Performance.getMetrics", nil, reply, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Performance", Op: "GetMetrics", Err: err}
	}
	return
}

func (d *domainClient) Metrics(ctx context.Context) (MetricsClient, error) {
	s, err := rpcc.NewStream(ctx, "Performance.metrics", d.conn)
	if err != nil {
		return nil, err
	}
	return &metricsClient{Stream: s}, nil
}

type metricsClient struct{ rpcc.Stream }

// GetStream returns the original Stream for use with cdp.Sync.
func (c *metricsClient) GetStream() rpcc.Stream { return c.Stream }

func (c *metricsClient) Recv() (*MetricsReply, error) {
	event := new(MetricsReply)
	if err := c.RecvMsg(event); err != nil {
		return nil, &internal.OpError{Domain: "Performance", Op: "Metrics Recv", Err: err}
	}
	return event, nil
}
