// Code generated by cdpgen. DO NOT EDIT.

package emulation

// ScreenOrientation Screen orientation.
type ScreenOrientation struct {
	// Type Orientation type.
	//
	// Values: "portraitPrimary", "portraitSecondary", "landscapePrimary", "landscapeSecondary".
	Type  string `json:"type"`
	Angle int    `json:"angle"` // Orientation angle.
}

// DisplayFeature
type DisplayFeature struct {
	// Orientation Orientation of a display feature in relation to screen
	//
	// Values: "vertical", "horizontal".
	Orientation string `json:"orientation"`
	Offset      int    `json:"offset"`     // The offset from the screen origin in either the x (for vertical orientation) or y (for horizontal orientation) direction.
	MaskLength  int    `json:"maskLength"` // A display feature may mask content such that it is not physically displayed - this length along with the offset describes this area. A display feature that only splits content will have a 0 mask_length.
}

// MediaFeature
type MediaFeature struct {
	Name  string `json:"name"`  // No description.
	Value string `json:"value"` // No description.
}

// VirtualTimePolicy advance: If the scheduler runs out of immediate work, the
// virtual time base may fast forward to allow the next delayed task (if any)
// to run; pause: The virtual time base may not advance;
// pauseIfNetworkFetchesPending: The virtual time base may not advance if there
// are any pending resource fetches.
//
// Note: This type is experimental.
type VirtualTimePolicy string

// VirtualTimePolicy as enums.
const (
	VirtualTimePolicyNotSet                       VirtualTimePolicy = ""
	VirtualTimePolicyAdvance                      VirtualTimePolicy = "advance"
	VirtualTimePolicyPause                        VirtualTimePolicy = "pause"
	VirtualTimePolicyPauseIfNetworkFetchesPending VirtualTimePolicy = "pauseIfNetworkFetchesPending"
)

func (e VirtualTimePolicy) Valid() bool {
	switch e {
	case "advance", "pause", "pauseIfNetworkFetchesPending":
		return true
	default:
		return false
	}
}

func (e VirtualTimePolicy) String() string {
	return string(e)
}

// UserAgentBrandVersion Used to specify User Agent Cient Hints to emulate.
// See https://wicg.github.io/ua-client-hints
//
// Note: This type is experimental.
type UserAgentBrandVersion struct {
	Brand   string `json:"brand"`   // No description.
	Version string `json:"version"` // No description.
}

// UserAgentMetadata Used to specify User Agent Cient Hints to emulate. See
// https://wicg.github.io/ua-client-hints Missing optional values will be
// filled in by the target with what it would normally use.
//
// Note: This type is experimental.
type UserAgentMetadata struct {
	Brands          []UserAgentBrandVersion `json:"brands,omitempty"`          // No description.
	FullVersionList []UserAgentBrandVersion `json:"fullVersionList,omitempty"` // No description.
	// FullVersion is deprecated.
	//
	// Deprecated: This property should not be used.
	FullVersion     *string `json:"fullVersion,omitempty"`
	Platform        string  `json:"platform"`          // No description.
	PlatformVersion string  `json:"platformVersion"`   // No description.
	Architecture    string  `json:"architecture"`      // No description.
	Model           string  `json:"model"`             // No description.
	Mobile          bool    `json:"mobile"`            // No description.
	Bitness         *string `json:"bitness,omitempty"` // No description.
	Wow64           *bool   `json:"wow64,omitempty"`   // No description.
}

// DisabledImageType Enum of image types that can be disabled.
//
// Note: This type is experimental.
type DisabledImageType string

// DisabledImageType as enums.
const (
	DisabledImageTypeNotSet DisabledImageType = ""
	DisabledImageTypeAVIF   DisabledImageType = "avif"
	DisabledImageTypeJXL    DisabledImageType = "jxl"
	DisabledImageTypeWEBP   DisabledImageType = "webp"
)

func (e DisabledImageType) Valid() bool {
	switch e {
	case "avif", "jxl", "webp":
		return true
	default:
		return false
	}
}

func (e DisabledImageType) String() string {
	return string(e)
}
